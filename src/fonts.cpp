/*
    FlyPDF - Create PDF files on the fly! 
    Copyright (C) 2006-2008 OS3 srl

    Written by Alessandro Molina
    Portions of code by Fabio Rotondo (fabio.rotondo@os3.it)
                        Gabriele Buscone (gabriele.buscone@os3.it)

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License ONLY.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/
#ifndef WIN32
#include "config.h"
#else
#define ENCODINGS_PATH "c:\\"
#endif

#include <cstdlib>
#include "flypdf.h"


TT_USHORT WinAnsiEncodings[256] = { 0 };
static std::vector< std::pair<std::string, unsigned long> > cp1252_map(256);
static std::vector< std::pair<std::string, unsigned long> > iso88591_map(256);
static std::vector< std::pair<std::string, unsigned long> > iso885915_map(256);

static void InitInternalCharMaps()
{
	cp1252_map[0] = std::make_pair<std::string, unsigned long>(".notdef", 0);
	cp1252_map[1] = std::make_pair<std::string, unsigned long>(".notdef", 1);
	cp1252_map[2] = std::make_pair<std::string, unsigned long>(".notdef", 2);
	cp1252_map[3] = std::make_pair<std::string, unsigned long>(".notdef", 3);
	cp1252_map[4] = std::make_pair<std::string, unsigned long>(".notdef", 4);
	cp1252_map[5] = std::make_pair<std::string, unsigned long>(".notdef", 5);
	cp1252_map[6] = std::make_pair<std::string, unsigned long>(".notdef", 6);
	cp1252_map[7] = std::make_pair<std::string, unsigned long>(".notdef", 7);
	cp1252_map[8] = std::make_pair<std::string, unsigned long>(".notdef", 8);
	cp1252_map[9] = std::make_pair<std::string, unsigned long>(".notdef", 9);
	cp1252_map[10] = std::make_pair<std::string, unsigned long>(".notdef", 10);
	cp1252_map[11] = std::make_pair<std::string, unsigned long>(".notdef", 11);
	cp1252_map[12] = std::make_pair<std::string, unsigned long>(".notdef", 12);
	cp1252_map[13] = std::make_pair<std::string, unsigned long>(".notdef", 13);
	cp1252_map[14] = std::make_pair<std::string, unsigned long>(".notdef", 14);
	cp1252_map[15] = std::make_pair<std::string, unsigned long>(".notdef", 15);
	cp1252_map[16] = std::make_pair<std::string, unsigned long>(".notdef", 16);
	cp1252_map[17] = std::make_pair<std::string, unsigned long>(".notdef", 17);
	cp1252_map[18] = std::make_pair<std::string, unsigned long>(".notdef", 18);
	cp1252_map[19] = std::make_pair<std::string, unsigned long>(".notdef", 19);
	cp1252_map[20] = std::make_pair<std::string, unsigned long>(".notdef", 20);
	cp1252_map[21] = std::make_pair<std::string, unsigned long>(".notdef", 21);
	cp1252_map[22] = std::make_pair<std::string, unsigned long>(".notdef", 22);
	cp1252_map[23] = std::make_pair<std::string, unsigned long>(".notdef", 23);
	cp1252_map[24] = std::make_pair<std::string, unsigned long>(".notdef", 24);
	cp1252_map[25] = std::make_pair<std::string, unsigned long>(".notdef", 25);
	cp1252_map[26] = std::make_pair<std::string, unsigned long>(".notdef", 26);
	cp1252_map[27] = std::make_pair<std::string, unsigned long>(".notdef", 27);
	cp1252_map[28] = std::make_pair<std::string, unsigned long>(".notdef", 28);
	cp1252_map[29] = std::make_pair<std::string, unsigned long>(".notdef", 29);
	cp1252_map[30] = std::make_pair<std::string, unsigned long>(".notdef", 30);
	cp1252_map[31] = std::make_pair<std::string, unsigned long>(".notdef", 31);
	cp1252_map[32] = std::make_pair<std::string, unsigned long>("space", 32);
	cp1252_map[33] = std::make_pair<std::string, unsigned long>("exclam", 33);
	cp1252_map[34] = std::make_pair<std::string, unsigned long>("quotedbl", 34);
	cp1252_map[35] = std::make_pair<std::string, unsigned long>("numbersign", 35);
	cp1252_map[36] = std::make_pair<std::string, unsigned long>("dollar", 36);
	cp1252_map[37] = std::make_pair<std::string, unsigned long>("percent", 37);
	cp1252_map[38] = std::make_pair<std::string, unsigned long>("ampersand", 38);
	cp1252_map[39] = std::make_pair<std::string, unsigned long>("quotesingle", 39);
	cp1252_map[40] = std::make_pair<std::string, unsigned long>("parenleft", 40);
	cp1252_map[41] = std::make_pair<std::string, unsigned long>("parenright", 41);
	cp1252_map[42] = std::make_pair<std::string, unsigned long>("asterisk", 42);
	cp1252_map[43] = std::make_pair<std::string, unsigned long>("plus", 43);
	cp1252_map[44] = std::make_pair<std::string, unsigned long>("comma", 44);
	cp1252_map[45] = std::make_pair<std::string, unsigned long>("hyphen", 45);
	cp1252_map[46] = std::make_pair<std::string, unsigned long>("period", 46);
	cp1252_map[47] = std::make_pair<std::string, unsigned long>("slash", 47);
	cp1252_map[48] = std::make_pair<std::string, unsigned long>("zero", 48);
	cp1252_map[49] = std::make_pair<std::string, unsigned long>("one", 49);
	cp1252_map[50] = std::make_pair<std::string, unsigned long>("two", 50);
	cp1252_map[51] = std::make_pair<std::string, unsigned long>("three", 51);
	cp1252_map[52] = std::make_pair<std::string, unsigned long>("four", 52);
	cp1252_map[53] = std::make_pair<std::string, unsigned long>("five", 53);
	cp1252_map[54] = std::make_pair<std::string, unsigned long>("six", 54);
	cp1252_map[55] = std::make_pair<std::string, unsigned long>("seven", 55);
	cp1252_map[56] = std::make_pair<std::string, unsigned long>("eight", 56);
	cp1252_map[57] = std::make_pair<std::string, unsigned long>("nine", 57);
	cp1252_map[58] = std::make_pair<std::string, unsigned long>("colon", 58);
	cp1252_map[59] = std::make_pair<std::string, unsigned long>("semicolon", 59);
	cp1252_map[60] = std::make_pair<std::string, unsigned long>("less", 60);
	cp1252_map[61] = std::make_pair<std::string, unsigned long>("equal", 61);
	cp1252_map[62] = std::make_pair<std::string, unsigned long>("greater", 62);
	cp1252_map[63] = std::make_pair<std::string, unsigned long>("question", 63);
cp1252_map[64] = std::make_pair<std::string, unsigned long>("at", 64);
cp1252_map[65] = std::make_pair<std::string, unsigned long>("A", 65);
cp1252_map[66] = std::make_pair<std::string, unsigned long>("B", 66);
cp1252_map[67] = std::make_pair<std::string, unsigned long>("C", 67);
cp1252_map[68] = std::make_pair<std::string, unsigned long>("D", 68);
cp1252_map[69] = std::make_pair<std::string, unsigned long>("E", 69);
cp1252_map[70] = std::make_pair<std::string, unsigned long>("F", 70);
cp1252_map[71] = std::make_pair<std::string, unsigned long>("G", 71);
cp1252_map[72] = std::make_pair<std::string, unsigned long>("H", 72);
cp1252_map[73] = std::make_pair<std::string, unsigned long>("I", 73);
cp1252_map[74] = std::make_pair<std::string, unsigned long>("J", 74);
cp1252_map[75] = std::make_pair<std::string, unsigned long>("K", 75);
cp1252_map[76] = std::make_pair<std::string, unsigned long>("L", 76);
cp1252_map[77] = std::make_pair<std::string, unsigned long>("M", 77);
cp1252_map[78] = std::make_pair<std::string, unsigned long>("N", 78);
cp1252_map[79] = std::make_pair<std::string, unsigned long>("O", 79);
cp1252_map[80] = std::make_pair<std::string, unsigned long>("P", 80);
cp1252_map[81] = std::make_pair<std::string, unsigned long>("Q", 81);
cp1252_map[82] = std::make_pair<std::string, unsigned long>("R", 82);
cp1252_map[83] = std::make_pair<std::string, unsigned long>("S", 83);
cp1252_map[84] = std::make_pair<std::string, unsigned long>("T", 84);
cp1252_map[85] = std::make_pair<std::string, unsigned long>("U", 85);
cp1252_map[86] = std::make_pair<std::string, unsigned long>("V", 86);
cp1252_map[87] = std::make_pair<std::string, unsigned long>("W", 87);
cp1252_map[88] = std::make_pair<std::string, unsigned long>("X", 88);
cp1252_map[89] = std::make_pair<std::string, unsigned long>("Y", 89);
cp1252_map[90] = std::make_pair<std::string, unsigned long>("Z", 90);
cp1252_map[91] = std::make_pair<std::string, unsigned long>("bracketleft", 91);
cp1252_map[92] = std::make_pair<std::string, unsigned long>("backslash", 92);
cp1252_map[93] = std::make_pair<std::string, unsigned long>("bracketright", 93);
cp1252_map[94] = std::make_pair<std::string, unsigned long>("asciicircum", 94);
cp1252_map[95] = std::make_pair<std::string, unsigned long>("underscore", 95);
cp1252_map[96] = std::make_pair<std::string, unsigned long>("grave", 96);
cp1252_map[97] = std::make_pair<std::string, unsigned long>("a", 97);
cp1252_map[98] = std::make_pair<std::string, unsigned long>("b", 98);
cp1252_map[99] = std::make_pair<std::string, unsigned long>("c", 99);
cp1252_map[100] = std::make_pair<std::string, unsigned long>("d", 100);
cp1252_map[101] = std::make_pair<std::string, unsigned long>("e", 101);
cp1252_map[102] = std::make_pair<std::string, unsigned long>("f", 102);
cp1252_map[103] = std::make_pair<std::string, unsigned long>("g", 103);
cp1252_map[104] = std::make_pair<std::string, unsigned long>("h", 104);
cp1252_map[105] = std::make_pair<std::string, unsigned long>("i", 105);
cp1252_map[106] = std::make_pair<std::string, unsigned long>("j", 106);
cp1252_map[107] = std::make_pair<std::string, unsigned long>("k", 107);
cp1252_map[108] = std::make_pair<std::string, unsigned long>("l", 108);
cp1252_map[109] = std::make_pair<std::string, unsigned long>("m", 109);
cp1252_map[110] = std::make_pair<std::string, unsigned long>("n", 110);
cp1252_map[111] = std::make_pair<std::string, unsigned long>("o", 111);
cp1252_map[112] = std::make_pair<std::string, unsigned long>("p", 112);
cp1252_map[113] = std::make_pair<std::string, unsigned long>("q", 113);
cp1252_map[114] = std::make_pair<std::string, unsigned long>("r", 114);
cp1252_map[115] = std::make_pair<std::string, unsigned long>("s", 115);
cp1252_map[116] = std::make_pair<std::string, unsigned long>("t", 116);
cp1252_map[117] = std::make_pair<std::string, unsigned long>("u", 117);
cp1252_map[118] = std::make_pair<std::string, unsigned long>("v", 118);
cp1252_map[119] = std::make_pair<std::string, unsigned long>("w", 119);
cp1252_map[120] = std::make_pair<std::string, unsigned long>("x", 120);
cp1252_map[121] = std::make_pair<std::string, unsigned long>("y", 121);
cp1252_map[122] = std::make_pair<std::string, unsigned long>("z", 122);
cp1252_map[123] = std::make_pair<std::string, unsigned long>("braceleft", 123);
cp1252_map[124] = std::make_pair<std::string, unsigned long>("bar", 124);
cp1252_map[125] = std::make_pair<std::string, unsigned long>("braceright", 125);
cp1252_map[126] = std::make_pair<std::string, unsigned long>("asciitilde", 126);
cp1252_map[127] = std::make_pair<std::string, unsigned long>(".notdef", 127);
cp1252_map[128] = std::make_pair<std::string, unsigned long>("Euro", 8364);
cp1252_map[129] = std::make_pair<std::string, unsigned long>(".notdef", 129);
cp1252_map[130] = std::make_pair<std::string, unsigned long>("quotesinglbase", 8218);
cp1252_map[131] = std::make_pair<std::string, unsigned long>("florin", 402);
cp1252_map[132] = std::make_pair<std::string, unsigned long>("quotedblbase", 8222);
cp1252_map[133] = std::make_pair<std::string, unsigned long>("ellipsis", 8230);
cp1252_map[134] = std::make_pair<std::string, unsigned long>("dagger", 8224);
cp1252_map[135] = std::make_pair<std::string, unsigned long>("daggerdbl", 8225);
cp1252_map[136] = std::make_pair<std::string, unsigned long>("circumflex", 710);
cp1252_map[137] = std::make_pair<std::string, unsigned long>("perthousand", 8240);
cp1252_map[138] = std::make_pair<std::string, unsigned long>("Scaron", 352);
cp1252_map[139] = std::make_pair<std::string, unsigned long>("guilsinglleft", 8249);
cp1252_map[140] = std::make_pair<std::string, unsigned long>("OE", 338);
cp1252_map[141] = std::make_pair<std::string, unsigned long>(".notdef", 141);
cp1252_map[142] = std::make_pair<std::string, unsigned long>("Zcaron", 381);
cp1252_map[143] = std::make_pair<std::string, unsigned long>(".notdef", 143);
cp1252_map[144] = std::make_pair<std::string, unsigned long>(".notdef", 144);
cp1252_map[145] = std::make_pair<std::string, unsigned long>("quoteleft", 8216);
cp1252_map[146] = std::make_pair<std::string, unsigned long>("quoteright", 8217);
cp1252_map[147] = std::make_pair<std::string, unsigned long>("quotedblleft", 8220);
cp1252_map[148] = std::make_pair<std::string, unsigned long>("quotedblright", 8221);
cp1252_map[149] = std::make_pair<std::string, unsigned long>("bullet", 8226);
cp1252_map[150] = std::make_pair<std::string, unsigned long>("endash", 8211);
cp1252_map[151] = std::make_pair<std::string, unsigned long>("emdash", 8212);
cp1252_map[152] = std::make_pair<std::string, unsigned long>("tilde", 732);
cp1252_map[153] = std::make_pair<std::string, unsigned long>("trademark", 8482);
cp1252_map[154] = std::make_pair<std::string, unsigned long>("scaron", 353);
cp1252_map[155] = std::make_pair<std::string, unsigned long>("guilsinglright", 8250);
cp1252_map[156] = std::make_pair<std::string, unsigned long>("oe", 339);
cp1252_map[157] = std::make_pair<std::string, unsigned long>(".notdef", 157);
cp1252_map[158] = std::make_pair<std::string, unsigned long>("zcaron", 382);
cp1252_map[159] = std::make_pair<std::string, unsigned long>("Ydieresis", 376);
cp1252_map[160] = std::make_pair<std::string, unsigned long>("space", 160);
cp1252_map[161] = std::make_pair<std::string, unsigned long>("exclamdown", 161);
cp1252_map[162] = std::make_pair<std::string, unsigned long>("cent", 162);
cp1252_map[163] = std::make_pair<std::string, unsigned long>("sterling", 163);
cp1252_map[164] = std::make_pair<std::string, unsigned long>("currency", 164);
cp1252_map[165] = std::make_pair<std::string, unsigned long>("yen", 165);
cp1252_map[166] = std::make_pair<std::string, unsigned long>("brokenbar", 166);
cp1252_map[167] = std::make_pair<std::string, unsigned long>("section", 167);
cp1252_map[168] = std::make_pair<std::string, unsigned long>("dieresis", 168);
cp1252_map[169] = std::make_pair<std::string, unsigned long>("copyright", 169);
cp1252_map[170] = std::make_pair<std::string, unsigned long>("ordfeminine", 170);
cp1252_map[171] = std::make_pair<std::string, unsigned long>("guillemotleft", 171);
cp1252_map[172] = std::make_pair<std::string, unsigned long>("logicalnot", 172);
cp1252_map[173] = std::make_pair<std::string, unsigned long>("hyphen", 173);
cp1252_map[174] = std::make_pair<std::string, unsigned long>("registered", 174);
cp1252_map[175] = std::make_pair<std::string, unsigned long>("macron", 175);
cp1252_map[176] = std::make_pair<std::string, unsigned long>("degree", 176);
cp1252_map[177] = std::make_pair<std::string, unsigned long>("plusminus", 177);
cp1252_map[178] = std::make_pair<std::string, unsigned long>("twosuperior", 178);
cp1252_map[179] = std::make_pair<std::string, unsigned long>("threesuperior", 179);
cp1252_map[180] = std::make_pair<std::string, unsigned long>("acute", 180);
cp1252_map[181] = std::make_pair<std::string, unsigned long>("mu", 181);
cp1252_map[182] = std::make_pair<std::string, unsigned long>("paragraph", 182);
cp1252_map[183] = std::make_pair<std::string, unsigned long>("periodcentered", 183);
cp1252_map[184] = std::make_pair<std::string, unsigned long>("cedilla", 184);
cp1252_map[185] = std::make_pair<std::string, unsigned long>("onesuperior", 185);
cp1252_map[186] = std::make_pair<std::string, unsigned long>("ordmasculine", 186);
cp1252_map[187] = std::make_pair<std::string, unsigned long>("guillemotright", 187);
cp1252_map[188] = std::make_pair<std::string, unsigned long>("onequarter", 188);
cp1252_map[189] = std::make_pair<std::string, unsigned long>("onehalf", 189);
cp1252_map[190] = std::make_pair<std::string, unsigned long>("threequarters", 190);
cp1252_map[191] = std::make_pair<std::string, unsigned long>("questiondown", 191);
cp1252_map[192] = std::make_pair<std::string, unsigned long>("Agrave", 192);
cp1252_map[193] = std::make_pair<std::string, unsigned long>("Aacute", 193);
cp1252_map[194] = std::make_pair<std::string, unsigned long>("Acircumflex", 194);
cp1252_map[195] = std::make_pair<std::string, unsigned long>("Atilde", 195);
cp1252_map[196] = std::make_pair<std::string, unsigned long>("Adieresis", 196);
cp1252_map[197] = std::make_pair<std::string, unsigned long>("Aring", 197);
cp1252_map[198] = std::make_pair<std::string, unsigned long>("AE", 198);
cp1252_map[199] = std::make_pair<std::string, unsigned long>("Ccedilla", 199);
cp1252_map[200] = std::make_pair<std::string, unsigned long>("Egrave", 200);
cp1252_map[201] = std::make_pair<std::string, unsigned long>("Eacute", 201);
cp1252_map[202] = std::make_pair<std::string, unsigned long>("Ecircumflex", 202);
cp1252_map[203] = std::make_pair<std::string, unsigned long>("Edieresis", 203);
cp1252_map[204] = std::make_pair<std::string, unsigned long>("Igrave", 204);
cp1252_map[205] = std::make_pair<std::string, unsigned long>("Iacute", 205);
cp1252_map[206] = std::make_pair<std::string, unsigned long>("Icircumflex", 206);
cp1252_map[207] = std::make_pair<std::string, unsigned long>("Idieresis", 207);
cp1252_map[208] = std::make_pair<std::string, unsigned long>("Eth", 208);
cp1252_map[209] = std::make_pair<std::string, unsigned long>("Ntilde", 209);
cp1252_map[210] = std::make_pair<std::string, unsigned long>("Ograve", 210);
cp1252_map[211] = std::make_pair<std::string, unsigned long>("Oacute", 211);
cp1252_map[212] = std::make_pair<std::string, unsigned long>("Ocircumflex", 212);
cp1252_map[213] = std::make_pair<std::string, unsigned long>("Otilde", 213);
cp1252_map[214] = std::make_pair<std::string, unsigned long>("Odieresis", 214);
cp1252_map[215] = std::make_pair<std::string, unsigned long>("multiply", 215);
cp1252_map[216] = std::make_pair<std::string, unsigned long>("Oslash", 216);
cp1252_map[217] = std::make_pair<std::string, unsigned long>("Ugrave", 217);
cp1252_map[218] = std::make_pair<std::string, unsigned long>("Uacute", 218);
cp1252_map[219] = std::make_pair<std::string, unsigned long>("Ucircumflex", 219);
cp1252_map[220] = std::make_pair<std::string, unsigned long>("Udieresis", 220);
cp1252_map[221] = std::make_pair<std::string, unsigned long>("Yacute", 221);
cp1252_map[222] = std::make_pair<std::string, unsigned long>("Thorn", 222);
cp1252_map[223] = std::make_pair<std::string, unsigned long>("germandbls", 223);
cp1252_map[224] = std::make_pair<std::string, unsigned long>("agrave", 224);
cp1252_map[225] = std::make_pair<std::string, unsigned long>("aacute", 225);
cp1252_map[226] = std::make_pair<std::string, unsigned long>("acircumflex", 226);
cp1252_map[227] = std::make_pair<std::string, unsigned long>("atilde", 227);
cp1252_map[228] = std::make_pair<std::string, unsigned long>("adieresis", 228);
cp1252_map[229] = std::make_pair<std::string, unsigned long>("aring", 229);
cp1252_map[230] = std::make_pair<std::string, unsigned long>("ae", 230);
cp1252_map[231] = std::make_pair<std::string, unsigned long>("ccedilla", 231);
cp1252_map[232] = std::make_pair<std::string, unsigned long>("egrave", 232);
cp1252_map[233] = std::make_pair<std::string, unsigned long>("eacute", 233);
cp1252_map[234] = std::make_pair<std::string, unsigned long>("ecircumflex", 234);
cp1252_map[235] = std::make_pair<std::string, unsigned long>("edieresis", 235);
cp1252_map[236] = std::make_pair<std::string, unsigned long>("igrave", 236);
cp1252_map[237] = std::make_pair<std::string, unsigned long>("iacute", 237);
cp1252_map[238] = std::make_pair<std::string, unsigned long>("icircumflex", 238);
cp1252_map[239] = std::make_pair<std::string, unsigned long>("idieresis", 239);
cp1252_map[240] = std::make_pair<std::string, unsigned long>("eth", 240);
cp1252_map[241] = std::make_pair<std::string, unsigned long>("ntilde", 241);
cp1252_map[242] = std::make_pair<std::string, unsigned long>("ograve", 242);
cp1252_map[243] = std::make_pair<std::string, unsigned long>("oacute", 243);
cp1252_map[244] = std::make_pair<std::string, unsigned long>("ocircumflex", 244);
cp1252_map[245] = std::make_pair<std::string, unsigned long>("otilde", 245);
cp1252_map[246] = std::make_pair<std::string, unsigned long>("odieresis", 246);
cp1252_map[247] = std::make_pair<std::string, unsigned long>("divide", 247);
cp1252_map[248] = std::make_pair<std::string, unsigned long>("oslash", 248);
cp1252_map[249] = std::make_pair<std::string, unsigned long>("ugrave", 249);
cp1252_map[250] = std::make_pair<std::string, unsigned long>("uacute", 250);
cp1252_map[251] = std::make_pair<std::string, unsigned long>("ucircumflex", 251);
cp1252_map[252] = std::make_pair<std::string, unsigned long>("udieresis", 252);
cp1252_map[253] = std::make_pair<std::string, unsigned long>("yacute", 253);
cp1252_map[254] = std::make_pair<std::string, unsigned long>("thorn", 254);
cp1252_map[255] = std::make_pair<std::string, unsigned long>("ydieresis", 255);

iso88591_map[0] = std::make_pair<std::string, unsigned long>(".notdef", 0);
iso88591_map[1] = std::make_pair<std::string, unsigned long>(".notdef", 1);
iso88591_map[2] = std::make_pair<std::string, unsigned long>(".notdef", 2);
iso88591_map[3] = std::make_pair<std::string, unsigned long>(".notdef", 3);
iso88591_map[4] = std::make_pair<std::string, unsigned long>(".notdef", 4);
iso88591_map[5] = std::make_pair<std::string, unsigned long>(".notdef", 5);
iso88591_map[6] = std::make_pair<std::string, unsigned long>(".notdef", 6);
iso88591_map[7] = std::make_pair<std::string, unsigned long>(".notdef", 7);
iso88591_map[8] = std::make_pair<std::string, unsigned long>(".notdef", 8);
iso88591_map[9] = std::make_pair<std::string, unsigned long>(".notdef", 9);
iso88591_map[10] = std::make_pair<std::string, unsigned long>(".notdef", 10);
iso88591_map[11] = std::make_pair<std::string, unsigned long>(".notdef", 11);
iso88591_map[12] = std::make_pair<std::string, unsigned long>(".notdef", 12);
iso88591_map[13] = std::make_pair<std::string, unsigned long>(".notdef", 13);
iso88591_map[14] = std::make_pair<std::string, unsigned long>(".notdef", 14);
iso88591_map[15] = std::make_pair<std::string, unsigned long>(".notdef", 15);
iso88591_map[16] = std::make_pair<std::string, unsigned long>(".notdef", 16);
iso88591_map[17] = std::make_pair<std::string, unsigned long>(".notdef", 17);
iso88591_map[18] = std::make_pair<std::string, unsigned long>(".notdef", 18);
iso88591_map[19] = std::make_pair<std::string, unsigned long>(".notdef", 19);
iso88591_map[20] = std::make_pair<std::string, unsigned long>(".notdef", 20);
iso88591_map[21] = std::make_pair<std::string, unsigned long>(".notdef", 21);
iso88591_map[22] = std::make_pair<std::string, unsigned long>(".notdef", 22);
iso88591_map[23] = std::make_pair<std::string, unsigned long>(".notdef", 23);
iso88591_map[24] = std::make_pair<std::string, unsigned long>(".notdef", 24);
iso88591_map[25] = std::make_pair<std::string, unsigned long>(".notdef", 25);
iso88591_map[26] = std::make_pair<std::string, unsigned long>(".notdef", 26);
iso88591_map[27] = std::make_pair<std::string, unsigned long>(".notdef", 27);
iso88591_map[28] = std::make_pair<std::string, unsigned long>(".notdef", 28);
iso88591_map[29] = std::make_pair<std::string, unsigned long>(".notdef", 29);
iso88591_map[30] = std::make_pair<std::string, unsigned long>(".notdef", 30);
iso88591_map[31] = std::make_pair<std::string, unsigned long>(".notdef", 31);
iso88591_map[32] = std::make_pair<std::string, unsigned long>("space", 32);
iso88591_map[33] = std::make_pair<std::string, unsigned long>("exclam", 33);
iso88591_map[34] = std::make_pair<std::string, unsigned long>("quotedbl", 34);
iso88591_map[35] = std::make_pair<std::string, unsigned long>("numbersign", 35);
iso88591_map[36] = std::make_pair<std::string, unsigned long>("dollar", 36);
iso88591_map[37] = std::make_pair<std::string, unsigned long>("percent", 37);
iso88591_map[38] = std::make_pair<std::string, unsigned long>("ampersand", 38);
iso88591_map[39] = std::make_pair<std::string, unsigned long>("quotesingle", 39);
iso88591_map[40] = std::make_pair<std::string, unsigned long>("parenleft", 40);
iso88591_map[41] = std::make_pair<std::string, unsigned long>("parenright", 41);
iso88591_map[42] = std::make_pair<std::string, unsigned long>("asterisk", 42);
iso88591_map[43] = std::make_pair<std::string, unsigned long>("plus", 43);
iso88591_map[44] = std::make_pair<std::string, unsigned long>("comma", 44);
iso88591_map[45] = std::make_pair<std::string, unsigned long>("hyphen", 45);
iso88591_map[46] = std::make_pair<std::string, unsigned long>("period", 46);
iso88591_map[47] = std::make_pair<std::string, unsigned long>("slash", 47);
iso88591_map[48] = std::make_pair<std::string, unsigned long>("zero", 48);
iso88591_map[49] = std::make_pair<std::string, unsigned long>("one", 49);
iso88591_map[50] = std::make_pair<std::string, unsigned long>("two", 50);
iso88591_map[51] = std::make_pair<std::string, unsigned long>("three", 51);
iso88591_map[52] = std::make_pair<std::string, unsigned long>("four", 52);
iso88591_map[53] = std::make_pair<std::string, unsigned long>("five", 53);
iso88591_map[54] = std::make_pair<std::string, unsigned long>("six", 54);
iso88591_map[55] = std::make_pair<std::string, unsigned long>("seven", 55);
iso88591_map[56] = std::make_pair<std::string, unsigned long>("eight", 56);
iso88591_map[57] = std::make_pair<std::string, unsigned long>("nine", 57);
iso88591_map[58] = std::make_pair<std::string, unsigned long>("colon", 58);
iso88591_map[59] = std::make_pair<std::string, unsigned long>("semicolon", 59);
iso88591_map[60] = std::make_pair<std::string, unsigned long>("less", 60);
iso88591_map[61] = std::make_pair<std::string, unsigned long>("equal", 61);
iso88591_map[62] = std::make_pair<std::string, unsigned long>("greater", 62);
iso88591_map[63] = std::make_pair<std::string, unsigned long>("question", 63);
iso88591_map[64] = std::make_pair<std::string, unsigned long>("at", 64);
iso88591_map[65] = std::make_pair<std::string, unsigned long>("A", 65);
iso88591_map[66] = std::make_pair<std::string, unsigned long>("B", 66);
iso88591_map[67] = std::make_pair<std::string, unsigned long>("C", 67);
iso88591_map[68] = std::make_pair<std::string, unsigned long>("D", 68);
iso88591_map[69] = std::make_pair<std::string, unsigned long>("E", 69);
iso88591_map[70] = std::make_pair<std::string, unsigned long>("F", 70);
iso88591_map[71] = std::make_pair<std::string, unsigned long>("G", 71);
iso88591_map[72] = std::make_pair<std::string, unsigned long>("H", 72);
iso88591_map[73] = std::make_pair<std::string, unsigned long>("I", 73);
iso88591_map[74] = std::make_pair<std::string, unsigned long>("J", 74);
iso88591_map[75] = std::make_pair<std::string, unsigned long>("K", 75);
iso88591_map[76] = std::make_pair<std::string, unsigned long>("L", 76);
iso88591_map[77] = std::make_pair<std::string, unsigned long>("M", 77);
iso88591_map[78] = std::make_pair<std::string, unsigned long>("N", 78);
iso88591_map[79] = std::make_pair<std::string, unsigned long>("O", 79);
iso88591_map[80] = std::make_pair<std::string, unsigned long>("P", 80);
iso88591_map[81] = std::make_pair<std::string, unsigned long>("Q", 81);
iso88591_map[82] = std::make_pair<std::string, unsigned long>("R", 82);
iso88591_map[83] = std::make_pair<std::string, unsigned long>("S", 83);
iso88591_map[84] = std::make_pair<std::string, unsigned long>("T", 84);
iso88591_map[85] = std::make_pair<std::string, unsigned long>("U", 85);
iso88591_map[86] = std::make_pair<std::string, unsigned long>("V", 86);
iso88591_map[87] = std::make_pair<std::string, unsigned long>("W", 87);
iso88591_map[88] = std::make_pair<std::string, unsigned long>("X", 88);
iso88591_map[89] = std::make_pair<std::string, unsigned long>("Y", 89);
iso88591_map[90] = std::make_pair<std::string, unsigned long>("Z", 90);
iso88591_map[91] = std::make_pair<std::string, unsigned long>("bracketleft", 91);
iso88591_map[92] = std::make_pair<std::string, unsigned long>("backslash", 92);
iso88591_map[93] = std::make_pair<std::string, unsigned long>("bracketright", 93);
iso88591_map[94] = std::make_pair<std::string, unsigned long>("asciicircum", 94);
iso88591_map[95] = std::make_pair<std::string, unsigned long>("underscore", 95);
iso88591_map[96] = std::make_pair<std::string, unsigned long>("grave", 96);
iso88591_map[97] = std::make_pair<std::string, unsigned long>("a", 97);
iso88591_map[98] = std::make_pair<std::string, unsigned long>("b", 98);
iso88591_map[99] = std::make_pair<std::string, unsigned long>("c", 99);
iso88591_map[100] = std::make_pair<std::string, unsigned long>("d", 100);
iso88591_map[101] = std::make_pair<std::string, unsigned long>("e", 101);
iso88591_map[102] = std::make_pair<std::string, unsigned long>("f", 102);
iso88591_map[103] = std::make_pair<std::string, unsigned long>("g", 103);
iso88591_map[104] = std::make_pair<std::string, unsigned long>("h", 104);
iso88591_map[105] = std::make_pair<std::string, unsigned long>("i", 105);
iso88591_map[106] = std::make_pair<std::string, unsigned long>("j", 106);
iso88591_map[107] = std::make_pair<std::string, unsigned long>("k", 107);
iso88591_map[108] = std::make_pair<std::string, unsigned long>("l", 108);
iso88591_map[109] = std::make_pair<std::string, unsigned long>("m", 109);
iso88591_map[110] = std::make_pair<std::string, unsigned long>("n", 110);
iso88591_map[111] = std::make_pair<std::string, unsigned long>("o", 111);
iso88591_map[112] = std::make_pair<std::string, unsigned long>("p", 112);
iso88591_map[113] = std::make_pair<std::string, unsigned long>("q", 113);
iso88591_map[114] = std::make_pair<std::string, unsigned long>("r", 114);
iso88591_map[115] = std::make_pair<std::string, unsigned long>("s", 115);
iso88591_map[116] = std::make_pair<std::string, unsigned long>("t", 116);
iso88591_map[117] = std::make_pair<std::string, unsigned long>("u", 117);
iso88591_map[118] = std::make_pair<std::string, unsigned long>("v", 118);
iso88591_map[119] = std::make_pair<std::string, unsigned long>("w", 119);
iso88591_map[120] = std::make_pair<std::string, unsigned long>("x", 120);
iso88591_map[121] = std::make_pair<std::string, unsigned long>("y", 121);
iso88591_map[122] = std::make_pair<std::string, unsigned long>("z", 122);
iso88591_map[123] = std::make_pair<std::string, unsigned long>("braceleft", 123);
iso88591_map[124] = std::make_pair<std::string, unsigned long>("bar", 124);
iso88591_map[125] = std::make_pair<std::string, unsigned long>("braceright", 125);
iso88591_map[126] = std::make_pair<std::string, unsigned long>("asciitilde", 126);
iso88591_map[127] = std::make_pair<std::string, unsigned long>(".notdef", 127);
iso88591_map[128] = std::make_pair<std::string, unsigned long>(".notdef", 128);
iso88591_map[129] = std::make_pair<std::string, unsigned long>(".notdef", 129);
iso88591_map[130] = std::make_pair<std::string, unsigned long>(".notdef", 130);
iso88591_map[131] = std::make_pair<std::string, unsigned long>(".notdef", 131);
iso88591_map[132] = std::make_pair<std::string, unsigned long>(".notdef", 132);
iso88591_map[133] = std::make_pair<std::string, unsigned long>(".notdef", 133);
iso88591_map[134] = std::make_pair<std::string, unsigned long>(".notdef", 134);
iso88591_map[135] = std::make_pair<std::string, unsigned long>(".notdef", 135);
iso88591_map[136] = std::make_pair<std::string, unsigned long>(".notdef", 136);
iso88591_map[137] = std::make_pair<std::string, unsigned long>(".notdef", 137);
iso88591_map[138] = std::make_pair<std::string, unsigned long>(".notdef", 138);
iso88591_map[139] = std::make_pair<std::string, unsigned long>(".notdef", 139);
iso88591_map[140] = std::make_pair<std::string, unsigned long>(".notdef", 140);
iso88591_map[141] = std::make_pair<std::string, unsigned long>(".notdef", 141);
iso88591_map[142] = std::make_pair<std::string, unsigned long>(".notdef", 142);
iso88591_map[143] = std::make_pair<std::string, unsigned long>(".notdef", 143);
iso88591_map[144] = std::make_pair<std::string, unsigned long>(".notdef", 144);
iso88591_map[145] = std::make_pair<std::string, unsigned long>(".notdef", 145);
iso88591_map[146] = std::make_pair<std::string, unsigned long>(".notdef", 146);
iso88591_map[147] = std::make_pair<std::string, unsigned long>(".notdef", 147);
iso88591_map[148] = std::make_pair<std::string, unsigned long>(".notdef", 148);
iso88591_map[149] = std::make_pair<std::string, unsigned long>(".notdef", 149);
iso88591_map[150] = std::make_pair<std::string, unsigned long>(".notdef", 150);
iso88591_map[151] = std::make_pair<std::string, unsigned long>(".notdef", 151);
iso88591_map[152] = std::make_pair<std::string, unsigned long>(".notdef", 152);
iso88591_map[153] = std::make_pair<std::string, unsigned long>(".notdef", 153);
iso88591_map[154] = std::make_pair<std::string, unsigned long>(".notdef", 154);
iso88591_map[155] = std::make_pair<std::string, unsigned long>(".notdef", 155);
iso88591_map[156] = std::make_pair<std::string, unsigned long>(".notdef", 156);
iso88591_map[157] = std::make_pair<std::string, unsigned long>(".notdef", 157);
iso88591_map[158] = std::make_pair<std::string, unsigned long>(".notdef", 158);
iso88591_map[159] = std::make_pair<std::string, unsigned long>(".notdef", 159);
iso88591_map[160] = std::make_pair<std::string, unsigned long>("space", 160);
iso88591_map[161] = std::make_pair<std::string, unsigned long>("exclamdown", 161);
iso88591_map[162] = std::make_pair<std::string, unsigned long>("cent", 162);
iso88591_map[163] = std::make_pair<std::string, unsigned long>("sterling", 163);
iso88591_map[164] = std::make_pair<std::string, unsigned long>("currency", 164);
iso88591_map[165] = std::make_pair<std::string, unsigned long>("yen", 165);
iso88591_map[166] = std::make_pair<std::string, unsigned long>("brokenbar", 166);
iso88591_map[167] = std::make_pair<std::string, unsigned long>("section", 167);
iso88591_map[168] = std::make_pair<std::string, unsigned long>("dieresis", 168);
iso88591_map[169] = std::make_pair<std::string, unsigned long>("copyright", 169);
iso88591_map[170] = std::make_pair<std::string, unsigned long>("ordfeminine", 170);
iso88591_map[171] = std::make_pair<std::string, unsigned long>("guillemotleft", 171);
iso88591_map[172] = std::make_pair<std::string, unsigned long>("logicalnot", 172);
iso88591_map[173] = std::make_pair<std::string, unsigned long>("hyphen", 173);
iso88591_map[174] = std::make_pair<std::string, unsigned long>("registered", 174);
iso88591_map[175] = std::make_pair<std::string, unsigned long>("macron", 175);
iso88591_map[176] = std::make_pair<std::string, unsigned long>("degree", 176);
iso88591_map[177] = std::make_pair<std::string, unsigned long>("plusminus", 177);
iso88591_map[178] = std::make_pair<std::string, unsigned long>("twosuperior", 178);
iso88591_map[179] = std::make_pair<std::string, unsigned long>("threesuperior", 179);
iso88591_map[180] = std::make_pair<std::string, unsigned long>("acute", 180);
iso88591_map[181] = std::make_pair<std::string, unsigned long>("mu", 181);
iso88591_map[182] = std::make_pair<std::string, unsigned long>("paragraph", 182);
iso88591_map[183] = std::make_pair<std::string, unsigned long>("periodcentered", 183);
iso88591_map[184] = std::make_pair<std::string, unsigned long>("cedilla", 184);
iso88591_map[185] = std::make_pair<std::string, unsigned long>("onesuperior", 185);
iso88591_map[186] = std::make_pair<std::string, unsigned long>("ordmasculine", 186);
iso88591_map[187] = std::make_pair<std::string, unsigned long>("guillemotright", 187);
iso88591_map[188] = std::make_pair<std::string, unsigned long>("onequarter", 188);
iso88591_map[189] = std::make_pair<std::string, unsigned long>("onehalf", 189);
iso88591_map[190] = std::make_pair<std::string, unsigned long>("threequarters", 190);
iso88591_map[191] = std::make_pair<std::string, unsigned long>("questiondown", 191);
iso88591_map[192] = std::make_pair<std::string, unsigned long>("Agrave", 192);
iso88591_map[193] = std::make_pair<std::string, unsigned long>("Aacute", 193);
iso88591_map[194] = std::make_pair<std::string, unsigned long>("Acircumflex", 194);
iso88591_map[195] = std::make_pair<std::string, unsigned long>("Atilde", 195);
iso88591_map[196] = std::make_pair<std::string, unsigned long>("Adieresis", 196);
iso88591_map[197] = std::make_pair<std::string, unsigned long>("Aring", 197);
iso88591_map[198] = std::make_pair<std::string, unsigned long>("AE", 198);
iso88591_map[199] = std::make_pair<std::string, unsigned long>("Ccedilla", 199);
iso88591_map[200] = std::make_pair<std::string, unsigned long>("Egrave", 200);
iso88591_map[201] = std::make_pair<std::string, unsigned long>("Eacute", 201);
iso88591_map[202] = std::make_pair<std::string, unsigned long>("Ecircumflex", 202);
iso88591_map[203] = std::make_pair<std::string, unsigned long>("Edieresis", 203);
iso88591_map[204] = std::make_pair<std::string, unsigned long>("Igrave", 204);
iso88591_map[205] = std::make_pair<std::string, unsigned long>("Iacute", 205);
iso88591_map[206] = std::make_pair<std::string, unsigned long>("Icircumflex", 206);
iso88591_map[207] = std::make_pair<std::string, unsigned long>("Idieresis", 207);
iso88591_map[208] = std::make_pair<std::string, unsigned long>("Eth", 208);
iso88591_map[209] = std::make_pair<std::string, unsigned long>("Ntilde", 209);
iso88591_map[210] = std::make_pair<std::string, unsigned long>("Ograve", 210);
iso88591_map[211] = std::make_pair<std::string, unsigned long>("Oacute", 211);
iso88591_map[212] = std::make_pair<std::string, unsigned long>("Ocircumflex", 212);
iso88591_map[213] = std::make_pair<std::string, unsigned long>("Otilde", 213);
iso88591_map[214] = std::make_pair<std::string, unsigned long>("Odieresis", 214);
iso88591_map[215] = std::make_pair<std::string, unsigned long>("multiply", 215);
iso88591_map[216] = std::make_pair<std::string, unsigned long>("Oslash", 216);
iso88591_map[217] = std::make_pair<std::string, unsigned long>("Ugrave", 217);
iso88591_map[218] = std::make_pair<std::string, unsigned long>("Uacute", 218);
iso88591_map[219] = std::make_pair<std::string, unsigned long>("Ucircumflex", 219);
iso88591_map[220] = std::make_pair<std::string, unsigned long>("Udieresis", 220);
iso88591_map[221] = std::make_pair<std::string, unsigned long>("Yacute", 221);
iso88591_map[222] = std::make_pair<std::string, unsigned long>("Thorn", 222);
iso88591_map[223] = std::make_pair<std::string, unsigned long>("germandbls", 223);
iso88591_map[224] = std::make_pair<std::string, unsigned long>("agrave", 224);
iso88591_map[225] = std::make_pair<std::string, unsigned long>("aacute", 225);
iso88591_map[226] = std::make_pair<std::string, unsigned long>("acircumflex", 226);
iso88591_map[227] = std::make_pair<std::string, unsigned long>("atilde", 227);
iso88591_map[228] = std::make_pair<std::string, unsigned long>("adieresis", 228);
iso88591_map[229] = std::make_pair<std::string, unsigned long>("aring", 229);
iso88591_map[230] = std::make_pair<std::string, unsigned long>("ae", 230);
iso88591_map[231] = std::make_pair<std::string, unsigned long>("ccedilla", 231);
iso88591_map[232] = std::make_pair<std::string, unsigned long>("egrave", 232);
iso88591_map[233] = std::make_pair<std::string, unsigned long>("eacute", 233);
iso88591_map[234] = std::make_pair<std::string, unsigned long>("ecircumflex", 234);
iso88591_map[235] = std::make_pair<std::string, unsigned long>("edieresis", 235);
iso88591_map[236] = std::make_pair<std::string, unsigned long>("igrave", 236);
iso88591_map[237] = std::make_pair<std::string, unsigned long>("iacute", 237);
iso88591_map[238] = std::make_pair<std::string, unsigned long>("icircumflex", 238);
iso88591_map[239] = std::make_pair<std::string, unsigned long>("idieresis", 239);
iso88591_map[240] = std::make_pair<std::string, unsigned long>("eth", 240);
iso88591_map[241] = std::make_pair<std::string, unsigned long>("ntilde", 241);
iso88591_map[242] = std::make_pair<std::string, unsigned long>("ograve", 242);
iso88591_map[243] = std::make_pair<std::string, unsigned long>("oacute", 243);
iso88591_map[244] = std::make_pair<std::string, unsigned long>("ocircumflex", 244);
iso88591_map[245] = std::make_pair<std::string, unsigned long>("otilde", 245);
iso88591_map[246] = std::make_pair<std::string, unsigned long>("odieresis", 246);
iso88591_map[247] = std::make_pair<std::string, unsigned long>("divide", 247);
iso88591_map[248] = std::make_pair<std::string, unsigned long>("oslash", 248);
iso88591_map[249] = std::make_pair<std::string, unsigned long>("ugrave", 249);
iso88591_map[250] = std::make_pair<std::string, unsigned long>("uacute", 250);
iso88591_map[251] = std::make_pair<std::string, unsigned long>("ucircumflex", 251);
iso88591_map[252] = std::make_pair<std::string, unsigned long>("udieresis", 252);
iso88591_map[253] = std::make_pair<std::string, unsigned long>("yacute", 253);
iso88591_map[254] = std::make_pair<std::string, unsigned long>("thorn", 254);
iso88591_map[255] = std::make_pair<std::string, unsigned long>("ydieresis", 255);

iso885915_map[0] = std::make_pair<std::string, unsigned long>(".notdef", 0);
iso885915_map[1] = std::make_pair<std::string, unsigned long>(".notdef", 1);
iso885915_map[2] = std::make_pair<std::string, unsigned long>(".notdef", 2);
iso885915_map[3] = std::make_pair<std::string, unsigned long>(".notdef", 3);
iso885915_map[4] = std::make_pair<std::string, unsigned long>(".notdef", 4);
iso885915_map[5] = std::make_pair<std::string, unsigned long>(".notdef", 5);
iso885915_map[6] = std::make_pair<std::string, unsigned long>(".notdef", 6);
iso885915_map[7] = std::make_pair<std::string, unsigned long>(".notdef", 7);
iso885915_map[8] = std::make_pair<std::string, unsigned long>(".notdef", 8);
iso885915_map[9] = std::make_pair<std::string, unsigned long>(".notdef", 9);
iso885915_map[10] = std::make_pair<std::string, unsigned long>(".notdef", 10);
iso885915_map[11] = std::make_pair<std::string, unsigned long>(".notdef", 11);
iso885915_map[12] = std::make_pair<std::string, unsigned long>(".notdef", 12);
iso885915_map[13] = std::make_pair<std::string, unsigned long>(".notdef", 13);
iso885915_map[14] = std::make_pair<std::string, unsigned long>(".notdef", 14);
iso885915_map[15] = std::make_pair<std::string, unsigned long>(".notdef", 15);
iso885915_map[16] = std::make_pair<std::string, unsigned long>(".notdef", 16);
iso885915_map[17] = std::make_pair<std::string, unsigned long>(".notdef", 17);
iso885915_map[18] = std::make_pair<std::string, unsigned long>(".notdef", 18);
iso885915_map[19] = std::make_pair<std::string, unsigned long>(".notdef", 19);
iso885915_map[20] = std::make_pair<std::string, unsigned long>(".notdef", 20);
iso885915_map[21] = std::make_pair<std::string, unsigned long>(".notdef", 21);
iso885915_map[22] = std::make_pair<std::string, unsigned long>(".notdef", 22);
iso885915_map[23] = std::make_pair<std::string, unsigned long>(".notdef", 23);
iso885915_map[24] = std::make_pair<std::string, unsigned long>(".notdef", 24);
iso885915_map[25] = std::make_pair<std::string, unsigned long>(".notdef", 25);
iso885915_map[26] = std::make_pair<std::string, unsigned long>(".notdef", 26);
iso885915_map[27] = std::make_pair<std::string, unsigned long>(".notdef", 27);
iso885915_map[28] = std::make_pair<std::string, unsigned long>(".notdef", 28);
iso885915_map[29] = std::make_pair<std::string, unsigned long>(".notdef", 29);
iso885915_map[30] = std::make_pair<std::string, unsigned long>(".notdef", 30);
iso885915_map[31] = std::make_pair<std::string, unsigned long>(".notdef", 31);
iso885915_map[32] = std::make_pair<std::string, unsigned long>("space", 32);
iso885915_map[33] = std::make_pair<std::string, unsigned long>("exclam", 33);
iso885915_map[34] = std::make_pair<std::string, unsigned long>("quotedbl", 34);
iso885915_map[35] = std::make_pair<std::string, unsigned long>("numbersign", 35);
iso885915_map[36] = std::make_pair<std::string, unsigned long>("dollar", 36);
iso885915_map[37] = std::make_pair<std::string, unsigned long>("percent", 37);
iso885915_map[38] = std::make_pair<std::string, unsigned long>("ampersand", 38);
iso885915_map[39] = std::make_pair<std::string, unsigned long>("quotesingle", 39);
iso885915_map[40] = std::make_pair<std::string, unsigned long>("parenleft", 40);
iso885915_map[41] = std::make_pair<std::string, unsigned long>("parenright", 41);
iso885915_map[42] = std::make_pair<std::string, unsigned long>("asterisk", 42);
iso885915_map[43] = std::make_pair<std::string, unsigned long>("plus", 43);
iso885915_map[44] = std::make_pair<std::string, unsigned long>("comma", 44);
iso885915_map[45] = std::make_pair<std::string, unsigned long>("hyphen", 45);
iso885915_map[46] = std::make_pair<std::string, unsigned long>("period", 46);
iso885915_map[47] = std::make_pair<std::string, unsigned long>("slash", 47);
iso885915_map[48] = std::make_pair<std::string, unsigned long>("zero", 48);
iso885915_map[49] = std::make_pair<std::string, unsigned long>("one", 49);
iso885915_map[50] = std::make_pair<std::string, unsigned long>("two", 50);
iso885915_map[51] = std::make_pair<std::string, unsigned long>("three", 51);
iso885915_map[52] = std::make_pair<std::string, unsigned long>("four", 52);
iso885915_map[53] = std::make_pair<std::string, unsigned long>("five", 53);
iso885915_map[54] = std::make_pair<std::string, unsigned long>("six", 54);
iso885915_map[55] = std::make_pair<std::string, unsigned long>("seven", 55);
iso885915_map[56] = std::make_pair<std::string, unsigned long>("eight", 56);
iso885915_map[57] = std::make_pair<std::string, unsigned long>("nine", 57);
iso885915_map[58] = std::make_pair<std::string, unsigned long>("colon", 58);
iso885915_map[59] = std::make_pair<std::string, unsigned long>("semicolon", 59);
iso885915_map[60] = std::make_pair<std::string, unsigned long>("less", 60);
iso885915_map[61] = std::make_pair<std::string, unsigned long>("equal", 61);
iso885915_map[62] = std::make_pair<std::string, unsigned long>("greater", 62);
iso885915_map[63] = std::make_pair<std::string, unsigned long>("question", 63);
iso885915_map[64] = std::make_pair<std::string, unsigned long>("at", 64);
iso885915_map[65] = std::make_pair<std::string, unsigned long>("A", 65);
iso885915_map[66] = std::make_pair<std::string, unsigned long>("B", 66);
iso885915_map[67] = std::make_pair<std::string, unsigned long>("C", 67);
iso885915_map[68] = std::make_pair<std::string, unsigned long>("D", 68);
iso885915_map[69] = std::make_pair<std::string, unsigned long>("E", 69);
iso885915_map[70] = std::make_pair<std::string, unsigned long>("F", 70);
iso885915_map[71] = std::make_pair<std::string, unsigned long>("G", 71);
iso885915_map[72] = std::make_pair<std::string, unsigned long>("H", 72);
iso885915_map[73] = std::make_pair<std::string, unsigned long>("I", 73);
iso885915_map[74] = std::make_pair<std::string, unsigned long>("J", 74);
iso885915_map[75] = std::make_pair<std::string, unsigned long>("K", 75);
iso885915_map[76] = std::make_pair<std::string, unsigned long>("L", 76);
iso885915_map[77] = std::make_pair<std::string, unsigned long>("M", 77);
iso885915_map[78] = std::make_pair<std::string, unsigned long>("N", 78);
iso885915_map[79] = std::make_pair<std::string, unsigned long>("O", 79);
iso885915_map[80] = std::make_pair<std::string, unsigned long>("P", 80);
iso885915_map[81] = std::make_pair<std::string, unsigned long>("Q", 81);
iso885915_map[82] = std::make_pair<std::string, unsigned long>("R", 82);
iso885915_map[83] = std::make_pair<std::string, unsigned long>("S", 83);
iso885915_map[84] = std::make_pair<std::string, unsigned long>("T", 84);
iso885915_map[85] = std::make_pair<std::string, unsigned long>("U", 85);
iso885915_map[86] = std::make_pair<std::string, unsigned long>("V", 86);
iso885915_map[87] = std::make_pair<std::string, unsigned long>("W", 87);
iso885915_map[88] = std::make_pair<std::string, unsigned long>("X", 88);
iso885915_map[89] = std::make_pair<std::string, unsigned long>("Y", 89);
iso885915_map[90] = std::make_pair<std::string, unsigned long>("Z", 90);
iso885915_map[91] = std::make_pair<std::string, unsigned long>("bracketleft", 91);
iso885915_map[92] = std::make_pair<std::string, unsigned long>("backslash", 92);
iso885915_map[93] = std::make_pair<std::string, unsigned long>("bracketright", 93);
iso885915_map[94] = std::make_pair<std::string, unsigned long>("asciicircum", 94);
iso885915_map[95] = std::make_pair<std::string, unsigned long>("underscore", 95);
iso885915_map[96] = std::make_pair<std::string, unsigned long>("grave", 96);
iso885915_map[97] = std::make_pair<std::string, unsigned long>("a", 97);
iso885915_map[98] = std::make_pair<std::string, unsigned long>("b", 98);
iso885915_map[99] = std::make_pair<std::string, unsigned long>("c", 99);
iso885915_map[100] = std::make_pair<std::string, unsigned long>("d", 100);
iso885915_map[101] = std::make_pair<std::string, unsigned long>("e", 101);
iso885915_map[102] = std::make_pair<std::string, unsigned long>("f", 102);
iso885915_map[103] = std::make_pair<std::string, unsigned long>("g", 103);
iso885915_map[104] = std::make_pair<std::string, unsigned long>("h", 104);
iso885915_map[105] = std::make_pair<std::string, unsigned long>("i", 105);
iso885915_map[106] = std::make_pair<std::string, unsigned long>("j", 106);
iso885915_map[107] = std::make_pair<std::string, unsigned long>("k", 107);
iso885915_map[108] = std::make_pair<std::string, unsigned long>("l", 108);
iso885915_map[109] = std::make_pair<std::string, unsigned long>("m", 109);
iso885915_map[110] = std::make_pair<std::string, unsigned long>("n", 110);
iso885915_map[111] = std::make_pair<std::string, unsigned long>("o", 111);
iso885915_map[112] = std::make_pair<std::string, unsigned long>("p", 112);
iso885915_map[113] = std::make_pair<std::string, unsigned long>("q", 113);
iso885915_map[114] = std::make_pair<std::string, unsigned long>("r", 114);
iso885915_map[115] = std::make_pair<std::string, unsigned long>("s", 115);
iso885915_map[116] = std::make_pair<std::string, unsigned long>("t", 116);
iso885915_map[117] = std::make_pair<std::string, unsigned long>("u", 117);
iso885915_map[118] = std::make_pair<std::string, unsigned long>("v", 118);
iso885915_map[119] = std::make_pair<std::string, unsigned long>("w", 119);
iso885915_map[120] = std::make_pair<std::string, unsigned long>("x", 120);
iso885915_map[121] = std::make_pair<std::string, unsigned long>("y", 121);
iso885915_map[122] = std::make_pair<std::string, unsigned long>("z", 122);
iso885915_map[123] = std::make_pair<std::string, unsigned long>("braceleft", 123);
iso885915_map[124] = std::make_pair<std::string, unsigned long>("bar", 124);
iso885915_map[125] = std::make_pair<std::string, unsigned long>("braceright", 125);
iso885915_map[126] = std::make_pair<std::string, unsigned long>("asciitilde", 126);
iso885915_map[127] = std::make_pair<std::string, unsigned long>(".notdef", 127);
iso885915_map[128] = std::make_pair<std::string, unsigned long>(".notdef", 128);
iso885915_map[129] = std::make_pair<std::string, unsigned long>(".notdef", 129);
iso885915_map[130] = std::make_pair<std::string, unsigned long>(".notdef", 130);
iso885915_map[131] = std::make_pair<std::string, unsigned long>(".notdef", 131);
iso885915_map[132] = std::make_pair<std::string, unsigned long>(".notdef", 132);
iso885915_map[133] = std::make_pair<std::string, unsigned long>(".notdef", 133);
iso885915_map[134] = std::make_pair<std::string, unsigned long>(".notdef", 134);
iso885915_map[135] = std::make_pair<std::string, unsigned long>(".notdef", 135);
iso885915_map[136] = std::make_pair<std::string, unsigned long>(".notdef", 136);
iso885915_map[137] = std::make_pair<std::string, unsigned long>(".notdef", 137);
iso885915_map[138] = std::make_pair<std::string, unsigned long>(".notdef", 138);
iso885915_map[139] = std::make_pair<std::string, unsigned long>(".notdef", 139);
iso885915_map[140] = std::make_pair<std::string, unsigned long>(".notdef", 140);
iso885915_map[141] = std::make_pair<std::string, unsigned long>(".notdef", 141);
iso885915_map[142] = std::make_pair<std::string, unsigned long>(".notdef", 142);
iso885915_map[143] = std::make_pair<std::string, unsigned long>(".notdef", 143);
iso885915_map[144] = std::make_pair<std::string, unsigned long>(".notdef", 144);
iso885915_map[145] = std::make_pair<std::string, unsigned long>(".notdef", 145);
iso885915_map[146] = std::make_pair<std::string, unsigned long>(".notdef", 146);
iso885915_map[147] = std::make_pair<std::string, unsigned long>(".notdef", 147);
iso885915_map[148] = std::make_pair<std::string, unsigned long>(".notdef", 148);
iso885915_map[149] = std::make_pair<std::string, unsigned long>(".notdef", 149);
iso885915_map[150] = std::make_pair<std::string, unsigned long>(".notdef", 150);
iso885915_map[151] = std::make_pair<std::string, unsigned long>(".notdef", 151);
iso885915_map[152] = std::make_pair<std::string, unsigned long>(".notdef", 152);
iso885915_map[153] = std::make_pair<std::string, unsigned long>(".notdef", 153);
iso885915_map[154] = std::make_pair<std::string, unsigned long>(".notdef", 154);
iso885915_map[155] = std::make_pair<std::string, unsigned long>(".notdef", 155);
iso885915_map[156] = std::make_pair<std::string, unsigned long>(".notdef", 156);
iso885915_map[157] = std::make_pair<std::string, unsigned long>(".notdef", 157);
iso885915_map[158] = std::make_pair<std::string, unsigned long>(".notdef", 158);
iso885915_map[159] = std::make_pair<std::string, unsigned long>(".notdef", 159);
iso885915_map[160] = std::make_pair<std::string, unsigned long>("space", 160);
iso885915_map[161] = std::make_pair<std::string, unsigned long>("exclamdown", 161);
iso885915_map[162] = std::make_pair<std::string, unsigned long>("cent", 162);
iso885915_map[163] = std::make_pair<std::string, unsigned long>("sterling", 163);
iso885915_map[164] = std::make_pair<std::string, unsigned long>("Euro", 8364);
iso885915_map[165] = std::make_pair<std::string, unsigned long>("yen", 165);
iso885915_map[166] = std::make_pair<std::string, unsigned long>("Scaron", 352);
iso885915_map[167] = std::make_pair<std::string, unsigned long>("section", 167);
iso885915_map[168] = std::make_pair<std::string, unsigned long>("scaron", 353);
iso885915_map[169] = std::make_pair<std::string, unsigned long>("copyright", 169);
iso885915_map[170] = std::make_pair<std::string, unsigned long>("ordfeminine", 170);
iso885915_map[171] = std::make_pair<std::string, unsigned long>("guillemotleft", 171);
iso885915_map[172] = std::make_pair<std::string, unsigned long>("logicalnot", 172);
iso885915_map[173] = std::make_pair<std::string, unsigned long>("hyphen", 173);
iso885915_map[174] = std::make_pair<std::string, unsigned long>("registered", 174);
iso885915_map[175] = std::make_pair<std::string, unsigned long>("macron", 175);
iso885915_map[176] = std::make_pair<std::string, unsigned long>("degree", 176);
iso885915_map[177] = std::make_pair<std::string, unsigned long>("plusminus", 177);
iso885915_map[178] = std::make_pair<std::string, unsigned long>("twosuperior", 178);
iso885915_map[179] = std::make_pair<std::string, unsigned long>("threesuperior", 179);
iso885915_map[180] = std::make_pair<std::string, unsigned long>("Zcaron", 381);
iso885915_map[181] = std::make_pair<std::string, unsigned long>("mu", 181);
iso885915_map[182] = std::make_pair<std::string, unsigned long>("paragraph", 182);
iso885915_map[183] = std::make_pair<std::string, unsigned long>("periodcentered", 183);
iso885915_map[184] = std::make_pair<std::string, unsigned long>("zcaron", 382);
iso885915_map[185] = std::make_pair<std::string, unsigned long>("onesuperior", 185);
iso885915_map[186] = std::make_pair<std::string, unsigned long>("ordmasculine", 186);
iso885915_map[187] = std::make_pair<std::string, unsigned long>("guillemotright", 187);
iso885915_map[188] = std::make_pair<std::string, unsigned long>("OE", 338);
iso885915_map[189] = std::make_pair<std::string, unsigned long>("oe", 339);
iso885915_map[190] = std::make_pair<std::string, unsigned long>("Ydieresis", 376);
iso885915_map[191] = std::make_pair<std::string, unsigned long>("questiondown", 191);
iso885915_map[192] = std::make_pair<std::string, unsigned long>("Agrave", 192);
iso885915_map[193] = std::make_pair<std::string, unsigned long>("Aacute", 193);
iso885915_map[194] = std::make_pair<std::string, unsigned long>("Acircumflex", 194);
iso885915_map[195] = std::make_pair<std::string, unsigned long>("Atilde", 195);
iso885915_map[196] = std::make_pair<std::string, unsigned long>("Adieresis", 196);
iso885915_map[197] = std::make_pair<std::string, unsigned long>("Aring", 197);
iso885915_map[198] = std::make_pair<std::string, unsigned long>("AE", 198);
iso885915_map[199] = std::make_pair<std::string, unsigned long>("Ccedilla", 199);
iso885915_map[200] = std::make_pair<std::string, unsigned long>("Egrave", 200);
iso885915_map[201] = std::make_pair<std::string, unsigned long>("Eacute", 201);
iso885915_map[202] = std::make_pair<std::string, unsigned long>("Ecircumflex", 202);
iso885915_map[203] = std::make_pair<std::string, unsigned long>("Edieresis", 203);
iso885915_map[204] = std::make_pair<std::string, unsigned long>("Igrave", 204);
iso885915_map[205] = std::make_pair<std::string, unsigned long>("Iacute", 205);
iso885915_map[206] = std::make_pair<std::string, unsigned long>("Icircumflex", 206);
iso885915_map[207] = std::make_pair<std::string, unsigned long>("Idieresis", 207);
iso885915_map[208] = std::make_pair<std::string, unsigned long>("Eth", 208);
iso885915_map[209] = std::make_pair<std::string, unsigned long>("Ntilde", 209);
iso885915_map[210] = std::make_pair<std::string, unsigned long>("Ograve", 210);
iso885915_map[211] = std::make_pair<std::string, unsigned long>("Oacute", 211);
iso885915_map[212] = std::make_pair<std::string, unsigned long>("Ocircumflex", 212);
iso885915_map[213] = std::make_pair<std::string, unsigned long>("Otilde", 213);
iso885915_map[214] = std::make_pair<std::string, unsigned long>("Odieresis", 214);
iso885915_map[215] = std::make_pair<std::string, unsigned long>("multiply", 215);
iso885915_map[216] = std::make_pair<std::string, unsigned long>("Oslash", 216);
iso885915_map[217] = std::make_pair<std::string, unsigned long>("Ugrave", 217);
iso885915_map[218] = std::make_pair<std::string, unsigned long>("Uacute", 218);
iso885915_map[219] = std::make_pair<std::string, unsigned long>("Ucircumflex", 219);
iso885915_map[220] = std::make_pair<std::string, unsigned long>("Udieresis", 220);
iso885915_map[221] = std::make_pair<std::string, unsigned long>("Yacute", 221);
iso885915_map[222] = std::make_pair<std::string, unsigned long>("Thorn", 222);
iso885915_map[223] = std::make_pair<std::string, unsigned long>("germandbls", 223);
iso885915_map[224] = std::make_pair<std::string, unsigned long>("agrave", 224);
iso885915_map[225] = std::make_pair<std::string, unsigned long>("aacute", 225);
iso885915_map[226] = std::make_pair<std::string, unsigned long>("acircumflex", 226);
iso885915_map[227] = std::make_pair<std::string, unsigned long>("atilde", 227);
iso885915_map[228] = std::make_pair<std::string, unsigned long>("adieresis", 228);
iso885915_map[229] = std::make_pair<std::string, unsigned long>("aring", 229);
iso885915_map[230] = std::make_pair<std::string, unsigned long>("ae", 230);
iso885915_map[231] = std::make_pair<std::string, unsigned long>("ccedilla", 231);
iso885915_map[232] = std::make_pair<std::string, unsigned long>("egrave", 232);
iso885915_map[233] = std::make_pair<std::string, unsigned long>("eacute", 233);
iso885915_map[234] = std::make_pair<std::string, unsigned long>("ecircumflex", 234);
iso885915_map[235] = std::make_pair<std::string, unsigned long>("edieresis", 235);
iso885915_map[236] = std::make_pair<std::string, unsigned long>("igrave", 236);
iso885915_map[237] = std::make_pair<std::string, unsigned long>("iacute", 237);
iso885915_map[238] = std::make_pair<std::string, unsigned long>("icircumflex", 238);
iso885915_map[239] = std::make_pair<std::string, unsigned long>("idieresis", 239);
iso885915_map[240] = std::make_pair<std::string, unsigned long>("eth", 240);
iso885915_map[241] = std::make_pair<std::string, unsigned long>("ntilde", 241);
iso885915_map[242] = std::make_pair<std::string, unsigned long>("ograve", 242);
iso885915_map[243] = std::make_pair<std::string, unsigned long>("oacute", 243);
iso885915_map[244] = std::make_pair<std::string, unsigned long>("ocircumflex", 244);
iso885915_map[245] = std::make_pair<std::string, unsigned long>("otilde", 245);
iso885915_map[246] = std::make_pair<std::string, unsigned long>("odieresis", 246);
iso885915_map[247] = std::make_pair<std::string, unsigned long>("divide", 247);
iso885915_map[248] = std::make_pair<std::string, unsigned long>("oslash", 248);
iso885915_map[249] = std::make_pair<std::string, unsigned long>("ugrave", 249);
iso885915_map[250] = std::make_pair<std::string, unsigned long>("uacute", 250);
iso885915_map[251] = std::make_pair<std::string, unsigned long>("ucircumflex", 251);
iso885915_map[252] = std::make_pair<std::string, unsigned long>("udieresis", 252);
iso885915_map[253] = std::make_pair<std::string, unsigned long>("yacute", 253);
iso885915_map[254] = std::make_pair<std::string, unsigned long>("thorn", 254);
iso885915_map[255] = std::make_pair<std::string, unsigned long>("ydieresis", 255);

}

void Pdf::InitInternalFonts (  )
{
	InitInternalCharMaps();

	std::vector< std::pair<std::string, unsigned long> > ref = ReadMap("cp1252");
	for (int i=0; i < 256; ++i)
		WinAnsiEncodings[i] = static_cast<TT_USHORT>(ref[i].second);

	for ( int i = 0; i < 255; ++i )
		fpdf_charwidths["courier"][i] = 600;

	fpdf_charwidths["courierB"] = fpdf_charwidths["courier"];
	fpdf_charwidths["courierI"] = fpdf_charwidths["courier"];
	fpdf_charwidths["courierBI"] = fpdf_charwidths["courier"];

	std::map < unsigned char, int >&helvetica_map = fpdf_charwidths["helvetica"];

	helvetica_map[0] = 278;
	helvetica_map[1] = 278;
	helvetica_map[2] = 278;
	helvetica_map[3] = 278;
	helvetica_map[4] = 278;
	helvetica_map[5] = 278;
	helvetica_map[6] = 278;
	helvetica_map[7] = 278;
	helvetica_map[8] = 278;
	helvetica_map[9] = 278;
	helvetica_map[10] = 278;
	helvetica_map[11] = 278;
	helvetica_map[12] = 278;
	helvetica_map[13] = 278;
	helvetica_map[14] = 278;
	helvetica_map[15] = 278;
	helvetica_map[16] = 278;
	helvetica_map[17] = 278;
	helvetica_map[18] = 278;
	helvetica_map[19] = 278;
	helvetica_map[20] = 278;
	helvetica_map[21] = 278;
	helvetica_map[22] = 278;
	helvetica_map[23] = 278;
	helvetica_map[24] = 278;
	helvetica_map[25] = 278;
	helvetica_map[26] = 278;
	helvetica_map[27] = 278;
	helvetica_map[28] = 278;
	helvetica_map[29] = 278;
	helvetica_map[30] = 278;
	helvetica_map[31] = 278;
	helvetica_map[' '] = 278;
	helvetica_map['!'] = 278;
	helvetica_map['"'] = 355;
	helvetica_map['#'] = 556;
	helvetica_map['$'] = 556;
	helvetica_map['%'] = 889;
	helvetica_map['&'] = 667;
	helvetica_map['\''] = 191;
	helvetica_map['('] = 333;
	helvetica_map[')'] = 333;
	helvetica_map['*'] = 389;
	helvetica_map['+'] = 584;
	helvetica_map[','] = 278;
	helvetica_map['-'] = 333;
	helvetica_map['.'] = 278;
	helvetica_map['/'] = 278;
	helvetica_map['0'] = 556;
	helvetica_map['1'] = 556;
	helvetica_map['2'] = 556;
	helvetica_map['3'] = 556;
	helvetica_map['4'] = 556;
	helvetica_map['5'] = 556;
	helvetica_map['6'] = 556;
	helvetica_map['7'] = 556;
	helvetica_map['8'] = 556;
	helvetica_map['9'] = 556;
	helvetica_map[':'] = 278;
	helvetica_map[';'] = 278;
	helvetica_map['<'] = 584;
	helvetica_map['='] = 584;
	helvetica_map['>'] = 584;
	helvetica_map['?'] = 556;
	helvetica_map['@'] = 1015;
	helvetica_map['A'] = 667;
	helvetica_map['B'] = 667;
	helvetica_map['C'] = 722;
	helvetica_map['D'] = 722;
	helvetica_map['E'] = 667;
	helvetica_map['F'] = 611;
	helvetica_map['G'] = 778;
	helvetica_map['H'] = 722;
	helvetica_map['I'] = 278;
	helvetica_map['J'] = 500;
	helvetica_map['K'] = 667;
	helvetica_map['L'] = 556;
	helvetica_map['M'] = 833;
	helvetica_map['N'] = 722;
	helvetica_map['O'] = 778;
	helvetica_map['P'] = 667;
	helvetica_map['Q'] = 778;
	helvetica_map['R'] = 722;
	helvetica_map['S'] = 667;
	helvetica_map['T'] = 611;
	helvetica_map['U'] = 722;
	helvetica_map['V'] = 667;
	helvetica_map['W'] = 944;
	helvetica_map['X'] = 667;
	helvetica_map['Y'] = 667;
	helvetica_map['Z'] = 611;
	helvetica_map['['] = 278;
	helvetica_map['\\'] = 278;
	helvetica_map[']'] = 278;
	helvetica_map['^'] = 469;
	helvetica_map['_'] = 556;
	helvetica_map['`'] = 333;
	helvetica_map['a'] = 556;
	helvetica_map['b'] = 556;
	helvetica_map['c'] = 500;
	helvetica_map['d'] = 556;
	helvetica_map['e'] = 556;
	helvetica_map['f'] = 278;
	helvetica_map['g'] = 556;
	helvetica_map['h'] = 556;
	helvetica_map['i'] = 222;
	helvetica_map['j'] = 222;
	helvetica_map['k'] = 500;
	helvetica_map['l'] = 222;
	helvetica_map['m'] = 833;
	helvetica_map['n'] = 556;
	helvetica_map['o'] = 556;
	helvetica_map['p'] = 556;
	helvetica_map['q'] = 556;
	helvetica_map['r'] = 333;
	helvetica_map['s'] = 500;
	helvetica_map['t'] = 278;
	helvetica_map['u'] = 556;
	helvetica_map['v'] = 500;
	helvetica_map['w'] = 722;
	helvetica_map['x'] = 500;
	helvetica_map['y'] = 500;
	helvetica_map['z'] = 500;
	helvetica_map['{'] = 334;
	helvetica_map['|'] = 260;
	helvetica_map['}'] = 334;
	helvetica_map['~'] = 584;
	helvetica_map[127] = 350;
	helvetica_map[128] = 556;
	helvetica_map[129] = 350;
	helvetica_map[130] = 222;
	helvetica_map[131] = 556;
	helvetica_map[132] = 333;
	helvetica_map[133] = 1000;
	helvetica_map[134] = 556;
	helvetica_map[135] = 556;
	helvetica_map[136] = 333;
	helvetica_map[137] = 1000;
	helvetica_map[138] = 667;
	helvetica_map[139] = 333;
	helvetica_map[140] = 1000;
	helvetica_map[141] = 350;
	helvetica_map[142] = 611;
	helvetica_map[143] = 350;
	helvetica_map[144] = 350;
	helvetica_map[145] = 222;
	helvetica_map[146] = 222;
	helvetica_map[147] = 333;
	helvetica_map[148] = 333;
	helvetica_map[149] = 350;
	helvetica_map[150] = 556;
	helvetica_map[151] = 1000;
	helvetica_map[152] = 333;
	helvetica_map[153] = 1000;
	helvetica_map[154] = 500;
	helvetica_map[155] = 333;
	helvetica_map[156] = 944;
	helvetica_map[157] = 350;
	helvetica_map[158] = 500;
	helvetica_map[159] = 667;
	helvetica_map[160] = 278;
	helvetica_map[161] = 333;
	helvetica_map[162] = 556;
	helvetica_map[163] = 556;
	helvetica_map[164] = 556;
	helvetica_map[165] = 556;
	helvetica_map[166] = 260;
	helvetica_map[167] = 556;
	helvetica_map[168] = 333;
	helvetica_map[169] = 737;
	helvetica_map[170] = 370;
	helvetica_map[171] = 556;
	helvetica_map[172] = 584;
	helvetica_map[173] = 333;
	helvetica_map[174] = 737;
	helvetica_map[175] = 333;
	helvetica_map[176] = 400;
	helvetica_map[177] = 584;
	helvetica_map[178] = 333;
	helvetica_map[179] = 333;
	helvetica_map[180] = 333;
	helvetica_map[181] = 556;
	helvetica_map[182] = 537;
	helvetica_map[183] = 278;
	helvetica_map[184] = 333;
	helvetica_map[185] = 333;
	helvetica_map[186] = 365;
	helvetica_map[187] = 556;
	helvetica_map[188] = 834;
	helvetica_map[189] = 834;
	helvetica_map[190] = 834;
	helvetica_map[191] = 611;
	helvetica_map[192] = 667;
	helvetica_map[193] = 667;
	helvetica_map[194] = 667;
	helvetica_map[195] = 667;
	helvetica_map[196] = 667;
	helvetica_map[197] = 667;
	helvetica_map[198] = 1000;
	helvetica_map[199] = 722;
	helvetica_map[200] = 667;
	helvetica_map[201] = 667;
	helvetica_map[202] = 667;
	helvetica_map[203] = 667;
	helvetica_map[204] = 278;
	helvetica_map[205] = 278;
	helvetica_map[206] = 278;
	helvetica_map[207] = 278;
	helvetica_map[208] = 722;
	helvetica_map[209] = 722;
	helvetica_map[210] = 778;
	helvetica_map[211] = 778;
	helvetica_map[212] = 778;
	helvetica_map[213] = 778;
	helvetica_map[214] = 778;
	helvetica_map[215] = 584;
	helvetica_map[216] = 778;
	helvetica_map[217] = 722;
	helvetica_map[218] = 722;
	helvetica_map[219] = 722;
	helvetica_map[220] = 722;
	helvetica_map[221] = 667;
	helvetica_map[222] = 667;
	helvetica_map[223] = 611;
	helvetica_map[224] = 556;
	helvetica_map[225] = 556;
	helvetica_map[226] = 556;
	helvetica_map[227] = 556;
	helvetica_map[228] = 556;
	helvetica_map[229] = 556;
	helvetica_map[230] = 889;
	helvetica_map[231] = 500;
	helvetica_map[232] = 556;
	helvetica_map[233] = 556;
	helvetica_map[234] = 556;
	helvetica_map[235] = 556;
	helvetica_map[236] = 278;
	helvetica_map[237] = 278;
	helvetica_map[238] = 278;
	helvetica_map[239] = 278;
	helvetica_map[240] = 556;
	helvetica_map[241] = 556;
	helvetica_map[242] = 556;
	helvetica_map[243] = 556;
	helvetica_map[244] = 556;
	helvetica_map[245] = 556;
	helvetica_map[246] = 556;
	helvetica_map[247] = 584;
	helvetica_map[248] = 611;
	helvetica_map[249] = 556;
	helvetica_map[250] = 556;
	helvetica_map[251] = 556;
	helvetica_map[252] = 556;
	helvetica_map[253] = 500;
	helvetica_map[254] = 556;
	helvetica_map[255] = 500;

	std::map < unsigned char, int >&helveticai_map = fpdf_charwidths["helveticaI"];

	helveticai_map[0] = 278;
	helveticai_map[1] = 278;
	helveticai_map[2] = 278;
	helveticai_map[3] = 278;
	helveticai_map[4] = 278;
	helveticai_map[5] = 278;
	helveticai_map[6] = 278;
	helveticai_map[7] = 278;
	helveticai_map[8] = 278;
	helveticai_map[9] = 278;
	helveticai_map[10] = 278;
	helveticai_map[11] = 278;
	helveticai_map[12] = 278;
	helveticai_map[13] = 278;
	helveticai_map[14] = 278;
	helveticai_map[15] = 278;
	helveticai_map[16] = 278;
	helveticai_map[17] = 278;
	helveticai_map[18] = 278;
	helveticai_map[19] = 278;
	helveticai_map[20] = 278;
	helveticai_map[21] = 278;
	helveticai_map[22] = 278;
	helveticai_map[23] = 278;
	helveticai_map[24] = 278;
	helveticai_map[25] = 278;
	helveticai_map[26] = 278;
	helveticai_map[27] = 278;
	helveticai_map[28] = 278;
	helveticai_map[29] = 278;
	helveticai_map[30] = 278;
	helveticai_map[31] = 278;
	helveticai_map[' '] = 278;
	helveticai_map['!'] = 278;
	helveticai_map['"'] = 355;
	helveticai_map['#'] = 556;
	helveticai_map['$'] = 556;
	helveticai_map['%'] = 889;
	helveticai_map['&'] = 667;
	helveticai_map['\''] = 191;
	helveticai_map['('] = 333;
	helveticai_map[')'] = 333;
	helveticai_map['*'] = 389;
	helveticai_map['+'] = 584;
	helveticai_map[','] = 278;
	helveticai_map['-'] = 333;
	helveticai_map['.'] = 278;
	helveticai_map['/'] = 278;
	helveticai_map['0'] = 556;
	helveticai_map['1'] = 556;
	helveticai_map['2'] = 556;
	helveticai_map['3'] = 556;
	helveticai_map['4'] = 556;
	helveticai_map['5'] = 556;
	helveticai_map['6'] = 556;
	helveticai_map['7'] = 556;
	helveticai_map['8'] = 556;
	helveticai_map['9'] = 556;
	helveticai_map[':'] = 278;
	helveticai_map[';'] = 278;
	helveticai_map['<'] = 584;
	helveticai_map['='] = 584;
	helveticai_map['>'] = 584;
	helveticai_map['?'] = 556;
	helveticai_map['@'] = 1015;
	helveticai_map['A'] = 667;
	helveticai_map['B'] = 667;
	helveticai_map['C'] = 722;
	helveticai_map['D'] = 722;
	helveticai_map['E'] = 667;
	helveticai_map['F'] = 611;
	helveticai_map['G'] = 778;
	helveticai_map['H'] = 722;
	helveticai_map['I'] = 278;
	helveticai_map['J'] = 500;
	helveticai_map['K'] = 667;
	helveticai_map['L'] = 556;
	helveticai_map['M'] = 833;
	helveticai_map['N'] = 722;
	helveticai_map['O'] = 778;
	helveticai_map['P'] = 667;
	helveticai_map['Q'] = 778;
	helveticai_map['R'] = 722;
	helveticai_map['S'] = 667;
	helveticai_map['T'] = 611;
	helveticai_map['U'] = 722;
	helveticai_map['V'] = 667;
	helveticai_map['W'] = 944;
	helveticai_map['X'] = 667;
	helveticai_map['Y'] = 667;
	helveticai_map['Z'] = 611;
	helveticai_map['['] = 278;
	helveticai_map['\\'] = 278;
	helveticai_map[']'] = 278;
	helveticai_map['^'] = 469;
	helveticai_map['_'] = 556;
	helveticai_map['`'] = 333;
	helveticai_map['a'] = 556;
	helveticai_map['b'] = 556;
	helveticai_map['c'] = 500;
	helveticai_map['d'] = 556;
	helveticai_map['e'] = 556;
	helveticai_map['f'] = 278;
	helveticai_map['g'] = 556;
	helveticai_map['h'] = 556;
	helveticai_map['i'] = 222;
	helveticai_map['j'] = 222;
	helveticai_map['k'] = 500;
	helveticai_map['l'] = 222;
	helveticai_map['m'] = 833;
	helveticai_map['n'] = 556;
	helveticai_map['o'] = 556;
	helveticai_map['p'] = 556;
	helveticai_map['q'] = 556;
	helveticai_map['r'] = 333;
	helveticai_map['s'] = 500;
	helveticai_map['t'] = 278;
	helveticai_map['u'] = 556;
	helveticai_map['v'] = 500;
	helveticai_map['w'] = 722;
	helveticai_map['x'] = 500;
	helveticai_map['y'] = 500;
	helveticai_map['z'] = 500;
	helveticai_map['{'] = 334;
	helveticai_map['|'] = 260;
	helveticai_map['}'] = 334;
	helveticai_map['~'] = 584;
	helveticai_map[127] = 350;
	helveticai_map[128] = 556;
	helveticai_map[129] = 350;
	helveticai_map[130] = 222;
	helveticai_map[131] = 556;
	helveticai_map[132] = 333;
	helveticai_map[133] = 1000;
	helveticai_map[134] = 556;
	helveticai_map[135] = 556;
	helveticai_map[136] = 333;
	helveticai_map[137] = 1000;
	helveticai_map[138] = 667;
	helveticai_map[139] = 333;
	helveticai_map[140] = 1000;
	helveticai_map[141] = 350;
	helveticai_map[142] = 611;
	helveticai_map[143] = 350;
	helveticai_map[144] = 350;
	helveticai_map[145] = 222;
	helveticai_map[146] = 222;
	helveticai_map[147] = 333;
	helveticai_map[148] = 333;
	helveticai_map[149] = 350;
	helveticai_map[150] = 556;
	helveticai_map[151] = 1000;
	helveticai_map[152] = 333;
	helveticai_map[153] = 1000;
	helveticai_map[154] = 500;
	helveticai_map[155] = 333;
	helveticai_map[156] = 944;
	helveticai_map[157] = 350;
	helveticai_map[158] = 500;
	helveticai_map[159] = 667;
	helveticai_map[160] = 278;
	helveticai_map[161] = 333;
	helveticai_map[162] = 556;
	helveticai_map[163] = 556;
	helveticai_map[164] = 556;
	helveticai_map[165] = 556;
	helveticai_map[166] = 260;
	helveticai_map[167] = 556;
	helveticai_map[168] = 333;
	helveticai_map[169] = 737;
	helveticai_map[170] = 370;
	helveticai_map[171] = 556;
	helveticai_map[172] = 584;
	helveticai_map[173] = 333;
	helveticai_map[174] = 737;
	helveticai_map[175] = 333;
	helveticai_map[176] = 400;
	helveticai_map[177] = 584;
	helveticai_map[178] = 333;
	helveticai_map[179] = 333;
	helveticai_map[180] = 333;
	helveticai_map[181] = 556;
	helveticai_map[182] = 537;
	helveticai_map[183] = 278;
	helveticai_map[184] = 333;
	helveticai_map[185] = 333;
	helveticai_map[186] = 365;
	helveticai_map[187] = 556;
	helveticai_map[188] = 834;
	helveticai_map[189] = 834;
	helveticai_map[190] = 834;
	helveticai_map[191] = 611;
	helveticai_map[192] = 667;
	helveticai_map[193] = 667;
	helveticai_map[194] = 667;
	helveticai_map[195] = 667;
	helveticai_map[196] = 667;
	helveticai_map[197] = 667;
	helveticai_map[198] = 1000;
	helveticai_map[199] = 722;
	helveticai_map[200] = 667;
	helveticai_map[201] = 667;
	helveticai_map[202] = 667;
	helveticai_map[203] = 667;
	helveticai_map[204] = 278;
	helveticai_map[205] = 278;
	helveticai_map[206] = 278;
	helveticai_map[207] = 278;
	helveticai_map[208] = 722;
	helveticai_map[209] = 722;
	helveticai_map[210] = 778;
	helveticai_map[211] = 778;
	helveticai_map[212] = 778;
	helveticai_map[213] = 778;
	helveticai_map[214] = 778;
	helveticai_map[215] = 584;
	helveticai_map[216] = 778;
	helveticai_map[217] = 722;
	helveticai_map[218] = 722;
	helveticai_map[219] = 722;
	helveticai_map[220] = 722;
	helveticai_map[221] = 667;
	helveticai_map[222] = 667;
	helveticai_map[223] = 611;
	helveticai_map[224] = 556;
	helveticai_map[225] = 556;
	helveticai_map[226] = 556;
	helveticai_map[227] = 556;
	helveticai_map[228] = 556;
	helveticai_map[229] = 556;
	helveticai_map[230] = 889;
	helveticai_map[231] = 500;
	helveticai_map[232] = 556;
	helveticai_map[233] = 556;
	helveticai_map[234] = 556;
	helveticai_map[235] = 556;
	helveticai_map[236] = 278;
	helveticai_map[237] = 278;
	helveticai_map[238] = 278;
	helveticai_map[239] = 278;
	helveticai_map[240] = 556;
	helveticai_map[241] = 556;
	helveticai_map[242] = 556;
	helveticai_map[243] = 556;
	helveticai_map[244] = 556;
	helveticai_map[245] = 556;
	helveticai_map[246] = 556;
	helveticai_map[247] = 584;
	helveticai_map[248] = 611;
	helveticai_map[249] = 556;
	helveticai_map[250] = 556;
	helveticai_map[251] = 556;
	helveticai_map[252] = 556;
	helveticai_map[253] = 500;
	helveticai_map[254] = 556;
	helveticai_map[255] = 500;

	std::map < unsigned char, int >&helveticaB_map = fpdf_charwidths["helveticaB"];

	helveticaB_map[0] = 278;
	helveticaB_map[1] = 278;
	helveticaB_map[2] = 278;
	helveticaB_map[3] = 278;
	helveticaB_map[4] = 278;
	helveticaB_map[5] = 278;
	helveticaB_map[6] = 278;
	helveticaB_map[7] = 278;
	helveticaB_map[8] = 278;
	helveticaB_map[9] = 278;
	helveticaB_map[10] = 278;
	helveticaB_map[11] = 278;
	helveticaB_map[12] = 278;
	helveticaB_map[13] = 278;
	helveticaB_map[14] = 278;
	helveticaB_map[15] = 278;
	helveticaB_map[16] = 278;
	helveticaB_map[17] = 278;
	helveticaB_map[18] = 278;
	helveticaB_map[19] = 278;
	helveticaB_map[20] = 278;
	helveticaB_map[21] = 278;
	helveticaB_map[22] = 278;
	helveticaB_map[23] = 278;
	helveticaB_map[24] = 278;
	helveticaB_map[25] = 278;
	helveticaB_map[26] = 278;
	helveticaB_map[27] = 278;
	helveticaB_map[28] = 278;
	helveticaB_map[29] = 278;
	helveticaB_map[30] = 278;
	helveticaB_map[31] = 278;
	helveticaB_map[' '] = 278;
	helveticaB_map['!'] = 333;
	helveticaB_map['"'] = 474;
	helveticaB_map['#'] = 556;
	helveticaB_map['$'] = 556;
	helveticaB_map['%'] = 889;
	helveticaB_map['&'] = 722;
	helveticaB_map['\''] = 238;
	helveticaB_map['('] = 333;
	helveticaB_map[')'] = 333;
	helveticaB_map['*'] = 389;
	helveticaB_map['+'] = 584;
	helveticaB_map[','] = 278;
	helveticaB_map['-'] = 333;
	helveticaB_map['.'] = 278;
	helveticaB_map['/'] = 278;
	helveticaB_map['0'] = 556;
	helveticaB_map['1'] = 556;
	helveticaB_map['2'] = 556;
	helveticaB_map['3'] = 556;
	helveticaB_map['4'] = 556;
	helveticaB_map['5'] = 556;
	helveticaB_map['6'] = 556;
	helveticaB_map['7'] = 556;
	helveticaB_map['8'] = 556;
	helveticaB_map['9'] = 556;
	helveticaB_map[':'] = 333;
	helveticaB_map[';'] = 333;
	helveticaB_map['<'] = 584;
	helveticaB_map['='] = 584;
	helveticaB_map['>'] = 584;
	helveticaB_map['?'] = 611;
	helveticaB_map['@'] = 975;
	helveticaB_map['A'] = 722;
	helveticaB_map['B'] = 722;
	helveticaB_map['C'] = 722;
	helveticaB_map['D'] = 722;
	helveticaB_map['E'] = 667;
	helveticaB_map['F'] = 611;
	helveticaB_map['G'] = 778;
	helveticaB_map['H'] = 722;
	helveticaB_map['I'] = 278;
	helveticaB_map['J'] = 556;
	helveticaB_map['K'] = 722;
	helveticaB_map['L'] = 611;
	helveticaB_map['M'] = 833;
	helveticaB_map['N'] = 722;
	helveticaB_map['O'] = 778;
	helveticaB_map['P'] = 667;
	helveticaB_map['Q'] = 778;
	helveticaB_map['R'] = 722;
	helveticaB_map['S'] = 667;
	helveticaB_map['T'] = 611;
	helveticaB_map['U'] = 722;
	helveticaB_map['V'] = 667;
	helveticaB_map['W'] = 944;
	helveticaB_map['X'] = 667;
	helveticaB_map['Y'] = 667;
	helveticaB_map['Z'] = 611;
	helveticaB_map['['] = 333;
	helveticaB_map['\\'] = 278;
	helveticaB_map[']'] = 333;
	helveticaB_map['^'] = 584;
	helveticaB_map['_'] = 556;
	helveticaB_map['`'] = 333;
	helveticaB_map['a'] = 556;
	helveticaB_map['b'] = 611;
	helveticaB_map['c'] = 556;
	helveticaB_map['d'] = 611;
	helveticaB_map['e'] = 556;
	helveticaB_map['f'] = 333;
	helveticaB_map['g'] = 611;
	helveticaB_map['h'] = 611;
	helveticaB_map['i'] = 278;
	helveticaB_map['j'] = 278;
	helveticaB_map['k'] = 556;
	helveticaB_map['l'] = 278;
	helveticaB_map['m'] = 889;
	helveticaB_map['n'] = 611;
	helveticaB_map['o'] = 611;
	helveticaB_map['p'] = 611;
	helveticaB_map['q'] = 611;
	helveticaB_map['r'] = 389;
	helveticaB_map['s'] = 556;
	helveticaB_map['t'] = 333;
	helveticaB_map['u'] = 611;
	helveticaB_map['v'] = 556;
	helveticaB_map['w'] = 778;
	helveticaB_map['x'] = 556;
	helveticaB_map['y'] = 556;
	helveticaB_map['z'] = 500;
	helveticaB_map['{'] = 389;
	helveticaB_map['|'] = 280;
	helveticaB_map['}'] = 389;
	helveticaB_map['~'] = 584;
	helveticaB_map[127] = 350;
	helveticaB_map[128] = 556;
	helveticaB_map[129] = 350;
	helveticaB_map[130] = 278;
	helveticaB_map[131] = 556;
	helveticaB_map[132] = 500;
	helveticaB_map[133] = 1000;
	helveticaB_map[134] = 556;
	helveticaB_map[135] = 556;
	helveticaB_map[136] = 333;
	helveticaB_map[137] = 1000;
	helveticaB_map[138] = 667;
	helveticaB_map[139] = 333;
	helveticaB_map[140] = 1000;
	helveticaB_map[141] = 350;
	helveticaB_map[142] = 611;
	helveticaB_map[143] = 350;
	helveticaB_map[144] = 350;
	helveticaB_map[145] = 278;
	helveticaB_map[146] = 278;
	helveticaB_map[147] = 500;
	helveticaB_map[148] = 500;
	helveticaB_map[149] = 350;
	helveticaB_map[150] = 556;
	helveticaB_map[151] = 1000;
	helveticaB_map[152] = 333;
	helveticaB_map[153] = 1000;
	helveticaB_map[154] = 556;
	helveticaB_map[155] = 333;
	helveticaB_map[156] = 944;
	helveticaB_map[157] = 350;
	helveticaB_map[158] = 500;
	helveticaB_map[159] = 667;
	helveticaB_map[160] = 278;
	helveticaB_map[161] = 333;
	helveticaB_map[162] = 556;
	helveticaB_map[163] = 556;
	helveticaB_map[164] = 556;
	helveticaB_map[165] = 556;
	helveticaB_map[166] = 280;
	helveticaB_map[167] = 556;
	helveticaB_map[168] = 333;
	helveticaB_map[169] = 737;
	helveticaB_map[170] = 370;
	helveticaB_map[171] = 556;
	helveticaB_map[172] = 584;
	helveticaB_map[173] = 333;
	helveticaB_map[174] = 737;
	helveticaB_map[175] = 333;
	helveticaB_map[176] = 400;
	helveticaB_map[177] = 584;
	helveticaB_map[178] = 333;
	helveticaB_map[179] = 333;
	helveticaB_map[180] = 333;
	helveticaB_map[181] = 611;
	helveticaB_map[182] = 556;
	helveticaB_map[183] = 278;
	helveticaB_map[184] = 333;
	helveticaB_map[185] = 333;
	helveticaB_map[186] = 365;
	helveticaB_map[187] = 556;
	helveticaB_map[188] = 834;
	helveticaB_map[189] = 834;
	helveticaB_map[190] = 834;
	helveticaB_map[191] = 611;
	helveticaB_map[192] = 722;
	helveticaB_map[193] = 722;
	helveticaB_map[194] = 722;
	helveticaB_map[195] = 722;
	helveticaB_map[196] = 722;
	helveticaB_map[197] = 722;
	helveticaB_map[198] = 1000;
	helveticaB_map[199] = 722;
	helveticaB_map[200] = 667;
	helveticaB_map[201] = 667;
	helveticaB_map[202] = 667;
	helveticaB_map[203] = 667;
	helveticaB_map[204] = 278;
	helveticaB_map[205] = 278;
	helveticaB_map[206] = 278;
	helveticaB_map[207] = 278;
	helveticaB_map[208] = 722;
	helveticaB_map[209] = 722;
	helveticaB_map[210] = 778;
	helveticaB_map[211] = 778;
	helveticaB_map[212] = 778;
	helveticaB_map[213] = 778;
	helveticaB_map[214] = 778;
	helveticaB_map[215] = 584;
	helveticaB_map[216] = 778;
	helveticaB_map[217] = 722;
	helveticaB_map[218] = 722;
	helveticaB_map[219] = 722;
	helveticaB_map[220] = 722;
	helveticaB_map[221] = 667;
	helveticaB_map[222] = 667;
	helveticaB_map[223] = 611;
	helveticaB_map[224] = 556;
	helveticaB_map[225] = 556;
	helveticaB_map[226] = 556;
	helveticaB_map[227] = 556;
	helveticaB_map[228] = 556;
	helveticaB_map[229] = 556;
	helveticaB_map[230] = 889;
	helveticaB_map[231] = 556;
	helveticaB_map[232] = 556;
	helveticaB_map[233] = 556;
	helveticaB_map[234] = 556;
	helveticaB_map[235] = 556;
	helveticaB_map[236] = 278;
	helveticaB_map[237] = 278;
	helveticaB_map[238] = 278;
	helveticaB_map[239] = 278;
	helveticaB_map[240] = 611;
	helveticaB_map[241] = 611;
	helveticaB_map[242] = 611;
	helveticaB_map[243] = 611;
	helveticaB_map[244] = 611;
	helveticaB_map[245] = 611;
	helveticaB_map[246] = 611;
	helveticaB_map[247] = 584;
	helveticaB_map[248] = 611;
	helveticaB_map[249] = 611;
	helveticaB_map[250] = 611;
	helveticaB_map[251] = 611;
	helveticaB_map[252] = 611;
	helveticaB_map[253] = 556;
	helveticaB_map[254] = 611;
	helveticaB_map[255] = 556;

	std::map < unsigned char, int >&helveticaBI_map = fpdf_charwidths["helveticaBI"];

	helveticaBI_map[0] = 278;
	helveticaBI_map[1] = 278;
	helveticaBI_map[2] = 278;
	helveticaBI_map[3] = 278;
	helveticaBI_map[4] = 278;
	helveticaBI_map[5] = 278;
	helveticaBI_map[6] = 278;
	helveticaBI_map[7] = 278;
	helveticaBI_map[8] = 278;
	helveticaBI_map[9] = 278;
	helveticaBI_map[10] = 278;
	helveticaBI_map[11] = 278;
	helveticaBI_map[12] = 278;
	helveticaBI_map[13] = 278;
	helveticaBI_map[14] = 278;
	helveticaBI_map[15] = 278;
	helveticaBI_map[16] = 278;
	helveticaBI_map[17] = 278;
	helveticaBI_map[18] = 278;
	helveticaBI_map[19] = 278;
	helveticaBI_map[20] = 278;
	helveticaBI_map[21] = 278;
	helveticaBI_map[22] = 278;
	helveticaBI_map[23] = 278;
	helveticaBI_map[24] = 278;
	helveticaBI_map[25] = 278;
	helveticaBI_map[26] = 278;
	helveticaBI_map[27] = 278;
	helveticaBI_map[28] = 278;
	helveticaBI_map[29] = 278;
	helveticaBI_map[30] = 278;
	helveticaBI_map[31] = 278;
	helveticaBI_map[' '] = 278;
	helveticaBI_map['!'] = 333;
	helveticaBI_map['"'] = 474;
	helveticaBI_map['#'] = 556;
	helveticaBI_map['$'] = 556;
	helveticaBI_map['%'] = 889;
	helveticaBI_map['&'] = 722;
	helveticaBI_map['\''] = 238;
	helveticaBI_map['('] = 333;
	helveticaBI_map[')'] = 333;
	helveticaBI_map['*'] = 389;
	helveticaBI_map['+'] = 584;
	helveticaBI_map[','] = 278;
	helveticaBI_map['-'] = 333;
	helveticaBI_map['.'] = 278;
	helveticaBI_map['/'] = 278;
	helveticaBI_map['0'] = 556;
	helveticaBI_map['1'] = 556;
	helveticaBI_map['2'] = 556;
	helveticaBI_map['3'] = 556;
	helveticaBI_map['4'] = 556;
	helveticaBI_map['5'] = 556;
	helveticaBI_map['6'] = 556;
	helveticaBI_map['7'] = 556;
	helveticaBI_map['8'] = 556;
	helveticaBI_map['9'] = 556;
	helveticaBI_map[':'] = 333;
	helveticaBI_map[';'] = 333;
	helveticaBI_map['<'] = 584;
	helveticaBI_map['='] = 584;
	helveticaBI_map['>'] = 584;
	helveticaBI_map['?'] = 611;
	helveticaBI_map['@'] = 975;
	helveticaBI_map['A'] = 722;
	helveticaBI_map['B'] = 722;
	helveticaBI_map['C'] = 722;
	helveticaBI_map['D'] = 722;
	helveticaBI_map['E'] = 667;
	helveticaBI_map['F'] = 611;
	helveticaBI_map['G'] = 778;
	helveticaBI_map['H'] = 722;
	helveticaBI_map['I'] = 278;
	helveticaBI_map['J'] = 556;
	helveticaBI_map['K'] = 722;
	helveticaBI_map['L'] = 611;
	helveticaBI_map['M'] = 833;
	helveticaBI_map['N'] = 722;
	helveticaBI_map['O'] = 778;
	helveticaBI_map['P'] = 667;
	helveticaBI_map['Q'] = 778;
	helveticaBI_map['R'] = 722;
	helveticaBI_map['S'] = 667;
	helveticaBI_map['T'] = 611;
	helveticaBI_map['U'] = 722;
	helveticaBI_map['V'] = 667;
	helveticaBI_map['W'] = 944;
	helveticaBI_map['X'] = 667;
	helveticaBI_map['Y'] = 667;
	helveticaBI_map['Z'] = 611;
	helveticaBI_map['['] = 333;
	helveticaBI_map['\\'] = 278;
	helveticaBI_map[']'] = 333;
	helveticaBI_map['^'] = 584;
	helveticaBI_map['_'] = 556;
	helveticaBI_map['`'] = 333;
	helveticaBI_map['a'] = 556;
	helveticaBI_map['b'] = 611;
	helveticaBI_map['c'] = 556;
	helveticaBI_map['d'] = 611;
	helveticaBI_map['e'] = 556;
	helveticaBI_map['f'] = 333;
	helveticaBI_map['g'] = 611;
	helveticaBI_map['h'] = 611;
	helveticaBI_map['i'] = 278;
	helveticaBI_map['j'] = 278;
	helveticaBI_map['k'] = 556;
	helveticaBI_map['l'] = 278;
	helveticaBI_map['m'] = 889;
	helveticaBI_map['n'] = 611;
	helveticaBI_map['o'] = 611;
	helveticaBI_map['p'] = 611;
	helveticaBI_map['q'] = 611;
	helveticaBI_map['r'] = 389;
	helveticaBI_map['s'] = 556;
	helveticaBI_map['t'] = 333;
	helveticaBI_map['u'] = 611;
	helveticaBI_map['v'] = 556;
	helveticaBI_map['w'] = 778;
	helveticaBI_map['x'] = 556;
	helveticaBI_map['y'] = 556;
	helveticaBI_map['z'] = 500;
	helveticaBI_map['{'] = 389;
	helveticaBI_map['|'] = 280;
	helveticaBI_map['}'] = 389;
	helveticaBI_map['~'] = 584;
	helveticaBI_map[127] = 350;
	helveticaBI_map[128] = 556;
	helveticaBI_map[129] = 350;
	helveticaBI_map[130] = 278;
	helveticaBI_map[131] = 556;
	helveticaBI_map[132] = 500;
	helveticaBI_map[133] = 1000;
	helveticaBI_map[134] = 556;
	helveticaBI_map[135] = 556;
	helveticaBI_map[136] = 333;
	helveticaBI_map[137] = 1000;
	helveticaBI_map[138] = 667;
	helveticaBI_map[139] = 333;
	helveticaBI_map[140] = 1000;
	helveticaBI_map[141] = 350;
	helveticaBI_map[142] = 611;
	helveticaBI_map[143] = 350;
	helveticaBI_map[144] = 350;
	helveticaBI_map[145] = 278;
	helveticaBI_map[146] = 278;
	helveticaBI_map[147] = 500;
	helveticaBI_map[148] = 500;
	helveticaBI_map[149] = 350;
	helveticaBI_map[150] = 556;
	helveticaBI_map[151] = 1000;
	helveticaBI_map[152] = 333;
	helveticaBI_map[153] = 1000;
	helveticaBI_map[154] = 556;
	helveticaBI_map[155] = 333;
	helveticaBI_map[156] = 944;
	helveticaBI_map[157] = 350;
	helveticaBI_map[158] = 500;
	helveticaBI_map[159] = 667;
	helveticaBI_map[160] = 278;
	helveticaBI_map[161] = 333;
	helveticaBI_map[162] = 556;
	helveticaBI_map[163] = 556;
	helveticaBI_map[164] = 556;
	helveticaBI_map[165] = 556;
	helveticaBI_map[166] = 280;
	helveticaBI_map[167] = 556;
	helveticaBI_map[168] = 333;
	helveticaBI_map[169] = 737;
	helveticaBI_map[170] = 370;
	helveticaBI_map[171] = 556;
	helveticaBI_map[172] = 584;
	helveticaBI_map[173] = 333;
	helveticaBI_map[174] = 737;
	helveticaBI_map[175] = 333;
	helveticaBI_map[176] = 400;
	helveticaBI_map[177] = 584;
	helveticaBI_map[178] = 333;
	helveticaBI_map[179] = 333;
	helveticaBI_map[180] = 333;
	helveticaBI_map[181] = 611;
	helveticaBI_map[182] = 556;
	helveticaBI_map[183] = 278;
	helveticaBI_map[184] = 333;
	helveticaBI_map[185] = 333;
	helveticaBI_map[186] = 365;
	helveticaBI_map[187] = 556;
	helveticaBI_map[188] = 834;
	helveticaBI_map[189] = 834;
	helveticaBI_map[190] = 834;
	helveticaBI_map[191] = 611;
	helveticaBI_map[192] = 722;
	helveticaBI_map[193] = 722;
	helveticaBI_map[194] = 722;
	helveticaBI_map[195] = 722;
	helveticaBI_map[196] = 722;
	helveticaBI_map[197] = 722;
	helveticaBI_map[198] = 1000;
	helveticaBI_map[199] = 722;
	helveticaBI_map[200] = 667;
	helveticaBI_map[201] = 667;
	helveticaBI_map[202] = 667;
	helveticaBI_map[203] = 667;
	helveticaBI_map[204] = 278;
	helveticaBI_map[205] = 278;
	helveticaBI_map[206] = 278;
	helveticaBI_map[207] = 278;
	helveticaBI_map[208] = 722;
	helveticaBI_map[209] = 722;
	helveticaBI_map[210] = 778;
	helveticaBI_map[211] = 778;
	helveticaBI_map[212] = 778;
	helveticaBI_map[213] = 778;
	helveticaBI_map[214] = 778;
	helveticaBI_map[215] = 584;
	helveticaBI_map[216] = 778;
	helveticaBI_map[217] = 722;
	helveticaBI_map[218] = 722;
	helveticaBI_map[219] = 722;
	helveticaBI_map[220] = 722;
	helveticaBI_map[221] = 667;
	helveticaBI_map[222] = 667;
	helveticaBI_map[223] = 611;
	helveticaBI_map[224] = 556;
	helveticaBI_map[225] = 556;
	helveticaBI_map[226] = 556;
	helveticaBI_map[227] = 556;
	helveticaBI_map[228] = 556;
	helveticaBI_map[229] = 556;
	helveticaBI_map[230] = 889;
	helveticaBI_map[231] = 556;
	helveticaBI_map[232] = 556;
	helveticaBI_map[233] = 556;
	helveticaBI_map[234] = 556;
	helveticaBI_map[235] = 556;
	helveticaBI_map[236] = 278;
	helveticaBI_map[237] = 278;
	helveticaBI_map[238] = 278;
	helveticaBI_map[239] = 278;
	helveticaBI_map[240] = 611;
	helveticaBI_map[241] = 611;
	helveticaBI_map[242] = 611;
	helveticaBI_map[243] = 611;
	helveticaBI_map[244] = 611;
	helveticaBI_map[245] = 611;
	helveticaBI_map[246] = 611;
	helveticaBI_map[247] = 584;
	helveticaBI_map[248] = 611;
	helveticaBI_map[249] = 611;
	helveticaBI_map[250] = 611;
	helveticaBI_map[251] = 611;
	helveticaBI_map[252] = 611;
	helveticaBI_map[253] = 556;
	helveticaBI_map[254] = 611;
	helveticaBI_map[255] = 556;

	std::map < unsigned char, int >&zapfdingbats_map = fpdf_charwidths["zapfdingbats"];

	zapfdingbats_map[0] = 0;
	zapfdingbats_map[1] = 0;
	zapfdingbats_map[2] = 0;
	zapfdingbats_map[3] = 0;
	zapfdingbats_map[4] = 0;
	zapfdingbats_map[5] = 0;
	zapfdingbats_map[6] = 0;
	zapfdingbats_map[7] = 0;
	zapfdingbats_map[8] = 0;
	zapfdingbats_map[9] = 0;
	zapfdingbats_map[10] = 0;
	zapfdingbats_map[11] = 0;
	zapfdingbats_map[12] = 0;
	zapfdingbats_map[13] = 0;
	zapfdingbats_map[14] = 0;
	zapfdingbats_map[15] = 0;
	zapfdingbats_map[16] = 0;
	zapfdingbats_map[17] = 0;
	zapfdingbats_map[18] = 0;
	zapfdingbats_map[19] = 0;
	zapfdingbats_map[20] = 0;
	zapfdingbats_map[21] = 0;
	zapfdingbats_map[22] = 0;
	zapfdingbats_map[23] = 0;
	zapfdingbats_map[24] = 0;
	zapfdingbats_map[25] = 0;
	zapfdingbats_map[26] = 0;
	zapfdingbats_map[27] = 0;
	zapfdingbats_map[28] = 0;
	zapfdingbats_map[29] = 0;
	zapfdingbats_map[30] = 0;
	zapfdingbats_map[31] = 0;
	zapfdingbats_map[' '] = 278;
	zapfdingbats_map['!'] = 974;
	zapfdingbats_map['"'] = 961;
	zapfdingbats_map['#'] = 974;
	zapfdingbats_map['$'] = 980;
	zapfdingbats_map['%'] = 719;
	zapfdingbats_map['&'] = 789;
	zapfdingbats_map['\''] = 790;
	zapfdingbats_map['('] = 791;
	zapfdingbats_map[')'] = 690;
	zapfdingbats_map['*'] = 960;
	zapfdingbats_map['+'] = 939;
	zapfdingbats_map[','] = 549;
	zapfdingbats_map['-'] = 855;
	zapfdingbats_map['.'] = 911;
	zapfdingbats_map['/'] = 933;
	zapfdingbats_map['0'] = 911;
	zapfdingbats_map['1'] = 945;
	zapfdingbats_map['2'] = 974;
	zapfdingbats_map['3'] = 755;
	zapfdingbats_map['4'] = 846;
	zapfdingbats_map['5'] = 762;
	zapfdingbats_map['6'] = 761;
	zapfdingbats_map['7'] = 571;
	zapfdingbats_map['8'] = 677;
	zapfdingbats_map['9'] = 763;
	zapfdingbats_map[':'] = 760;
	zapfdingbats_map[';'] = 759;
	zapfdingbats_map['<'] = 754;
	zapfdingbats_map['='] = 494;
	zapfdingbats_map['>'] = 552;
	zapfdingbats_map['?'] = 537;
	zapfdingbats_map['@'] = 577;
	zapfdingbats_map['A'] = 692;
	zapfdingbats_map['B'] = 786;
	zapfdingbats_map['C'] = 788;
	zapfdingbats_map['D'] = 788;
	zapfdingbats_map['E'] = 790;
	zapfdingbats_map['F'] = 793;
	zapfdingbats_map['G'] = 794;
	zapfdingbats_map['H'] = 816;
	zapfdingbats_map['I'] = 823;
	zapfdingbats_map['J'] = 789;
	zapfdingbats_map['K'] = 841;
	zapfdingbats_map['L'] = 823;
	zapfdingbats_map['M'] = 833;
	zapfdingbats_map['N'] = 816;
	zapfdingbats_map['O'] = 831;
	zapfdingbats_map['P'] = 923;
	zapfdingbats_map['Q'] = 744;
	zapfdingbats_map['R'] = 723;
	zapfdingbats_map['S'] = 749;
	zapfdingbats_map['T'] = 790;
	zapfdingbats_map['U'] = 792;
	zapfdingbats_map['V'] = 695;
	zapfdingbats_map['W'] = 776;
	zapfdingbats_map['X'] = 768;
	zapfdingbats_map['Y'] = 792;
	zapfdingbats_map['Z'] = 759;
	zapfdingbats_map['['] = 707;
	zapfdingbats_map['\\'] = 708;
	zapfdingbats_map[']'] = 682;
	zapfdingbats_map['^'] = 701;
	zapfdingbats_map['_'] = 826;
	zapfdingbats_map['`'] = 815;
	zapfdingbats_map['a'] = 789;
	zapfdingbats_map['b'] = 789;
	zapfdingbats_map['c'] = 707;
	zapfdingbats_map['d'] = 687;
	zapfdingbats_map['e'] = 696;
	zapfdingbats_map['f'] = 689;
	zapfdingbats_map['g'] = 786;
	zapfdingbats_map['h'] = 787;
	zapfdingbats_map['i'] = 713;
	zapfdingbats_map['j'] = 791;
	zapfdingbats_map['k'] = 785;
	zapfdingbats_map['l'] = 791;
	zapfdingbats_map['m'] = 873;
	zapfdingbats_map['n'] = 761;
	zapfdingbats_map['o'] = 762;
	zapfdingbats_map['p'] = 762;
	zapfdingbats_map['q'] = 759;
	zapfdingbats_map['r'] = 759;
	zapfdingbats_map['s'] = 892;
	zapfdingbats_map['t'] = 892;
	zapfdingbats_map['u'] = 788;
	zapfdingbats_map['v'] = 784;
	zapfdingbats_map['w'] = 438;
	zapfdingbats_map['x'] = 138;
	zapfdingbats_map['y'] = 277;
	zapfdingbats_map['z'] = 415;
	zapfdingbats_map['{'] = 392;
	zapfdingbats_map['|'] = 392;
	zapfdingbats_map['}'] = 668;
	zapfdingbats_map['~'] = 668;
	zapfdingbats_map[127] = 0;
	zapfdingbats_map[128] = 390;
	zapfdingbats_map[129] = 390;
	zapfdingbats_map[130] = 317;
	zapfdingbats_map[131] = 317;
	zapfdingbats_map[132] = 276;
	zapfdingbats_map[133] = 276;
	zapfdingbats_map[134] = 509;
	zapfdingbats_map[135] = 509;
	zapfdingbats_map[136] = 410;
	zapfdingbats_map[137] = 410;
	zapfdingbats_map[138] = 234;
	zapfdingbats_map[139] = 234;
	zapfdingbats_map[140] = 334;
	zapfdingbats_map[141] = 334;
	zapfdingbats_map[142] = 0;
	zapfdingbats_map[143] = 0;
	zapfdingbats_map[144] = 0;
	zapfdingbats_map[145] = 0;
	zapfdingbats_map[146] = 0;
	zapfdingbats_map[147] = 0;
	zapfdingbats_map[148] = 0;
	zapfdingbats_map[149] = 0;
	zapfdingbats_map[150] = 0;
	zapfdingbats_map[151] = 0;
	zapfdingbats_map[152] = 0;
	zapfdingbats_map[153] = 0;
	zapfdingbats_map[154] = 0;
	zapfdingbats_map[155] = 0;
	zapfdingbats_map[156] = 0;
	zapfdingbats_map[157] = 0;
	zapfdingbats_map[158] = 0;
	zapfdingbats_map[159] = 0;
	zapfdingbats_map[160] = 0;
	zapfdingbats_map[161] = 732;
	zapfdingbats_map[162] = 544;
	zapfdingbats_map[163] = 544;
	zapfdingbats_map[164] = 910;
	zapfdingbats_map[165] = 667;
	zapfdingbats_map[166] = 760;
	zapfdingbats_map[167] = 760;
	zapfdingbats_map[168] = 776;
	zapfdingbats_map[169] = 595;
	zapfdingbats_map[170] = 694;
	zapfdingbats_map[171] = 626;
	zapfdingbats_map[172] = 788;
	zapfdingbats_map[173] = 788;
	zapfdingbats_map[174] = 788;
	zapfdingbats_map[175] = 788;
	zapfdingbats_map[176] = 788;
	zapfdingbats_map[177] = 788;
	zapfdingbats_map[178] = 788;
	zapfdingbats_map[179] = 788;
	zapfdingbats_map[180] = 788;
	zapfdingbats_map[181] = 788;
	zapfdingbats_map[182] = 788;
	zapfdingbats_map[183] = 788;
	zapfdingbats_map[184] = 788;
	zapfdingbats_map[185] = 788;
	zapfdingbats_map[186] = 788;
	zapfdingbats_map[187] = 788;
	zapfdingbats_map[188] = 788;
	zapfdingbats_map[189] = 788;
	zapfdingbats_map[190] = 788;
	zapfdingbats_map[191] = 788;
	zapfdingbats_map[192] = 788;
	zapfdingbats_map[193] = 788;
	zapfdingbats_map[194] = 788;
	zapfdingbats_map[195] = 788;
	zapfdingbats_map[196] = 788;
	zapfdingbats_map[197] = 788;
	zapfdingbats_map[198] = 788;
	zapfdingbats_map[199] = 788;
	zapfdingbats_map[200] = 788;
	zapfdingbats_map[201] = 788;
	zapfdingbats_map[202] = 788;
	zapfdingbats_map[203] = 788;
	zapfdingbats_map[204] = 788;
	zapfdingbats_map[205] = 788;
	zapfdingbats_map[206] = 788;
	zapfdingbats_map[207] = 788;
	zapfdingbats_map[208] = 788;
	zapfdingbats_map[209] = 788;
	zapfdingbats_map[210] = 788;
	zapfdingbats_map[211] = 788;
	zapfdingbats_map[212] = 894;
	zapfdingbats_map[213] = 838;
	zapfdingbats_map[214] = 1016;
	zapfdingbats_map[215] = 458;
	zapfdingbats_map[216] = 748;
	zapfdingbats_map[217] = 924;
	zapfdingbats_map[218] = 748;
	zapfdingbats_map[219] = 918;
	zapfdingbats_map[220] = 927;
	zapfdingbats_map[221] = 928;
	zapfdingbats_map[222] = 928;
	zapfdingbats_map[223] = 834;
	zapfdingbats_map[224] = 873;
	zapfdingbats_map[225] = 828;
	zapfdingbats_map[226] = 924;
	zapfdingbats_map[227] = 924;
	zapfdingbats_map[228] = 917;
	zapfdingbats_map[229] = 930;
	zapfdingbats_map[230] = 931;
	zapfdingbats_map[231] = 463;
	zapfdingbats_map[232] = 883;
	zapfdingbats_map[233] = 836;
	zapfdingbats_map[234] = 836;
	zapfdingbats_map[235] = 867;
	zapfdingbats_map[236] = 867;
	zapfdingbats_map[237] = 696;
	zapfdingbats_map[238] = 696;
	zapfdingbats_map[239] = 874;
	zapfdingbats_map[240] = 0;
	zapfdingbats_map[241] = 874;
	zapfdingbats_map[242] = 760;
	zapfdingbats_map[243] = 946;
	zapfdingbats_map[244] = 771;
	zapfdingbats_map[245] = 865;
	zapfdingbats_map[246] = 771;
	zapfdingbats_map[247] = 888;
	zapfdingbats_map[248] = 967;
	zapfdingbats_map[249] = 888;
	zapfdingbats_map[250] = 831;
	zapfdingbats_map[251] = 873;
	zapfdingbats_map[252] = 927;
	zapfdingbats_map[253] = 970;
	zapfdingbats_map[254] = 918;
	zapfdingbats_map[255] = 0;


	std::map < unsigned char, int >&times_map = fpdf_charwidths["times"];

	times_map[0] = 250;
	times_map[1] = 250;
	times_map[2] = 250;
	times_map[3] = 250;
	times_map[4] = 250;
	times_map[5] = 250;
	times_map[6] = 250;
	times_map[7] = 250;
	times_map[8] = 250;
	times_map[9] = 250;
	times_map[10] = 250;
	times_map[11] = 250;
	times_map[12] = 250;
	times_map[13] = 250;
	times_map[14] = 250;
	times_map[15] = 250;
	times_map[16] = 250;
	times_map[17] = 250;
	times_map[18] = 250;
	times_map[19] = 250;
	times_map[20] = 250;
	times_map[21] = 250;
	times_map[22] = 250;
	times_map[23] = 250;
	times_map[24] = 250;
	times_map[25] = 250;
	times_map[26] = 250;
	times_map[27] = 250;
	times_map[28] = 250;
	times_map[29] = 250;
	times_map[30] = 250;
	times_map[31] = 250;
	times_map[' '] = 250;
	times_map['!'] = 333;
	times_map['"'] = 408;
	times_map['#'] = 500;
	times_map['$'] = 500;
	times_map['%'] = 833;
	times_map['&'] = 778;
	times_map['\''] = 180;
	times_map['('] = 333;
	times_map[')'] = 333;
	times_map['*'] = 500;
	times_map['+'] = 564;
	times_map[','] = 250;
	times_map['-'] = 333;
	times_map['.'] = 250;
	times_map['/'] = 278;
	times_map['0'] = 500;
	times_map['1'] = 500;
	times_map['2'] = 500;
	times_map['3'] = 500;
	times_map['4'] = 500;
	times_map['5'] = 500;
	times_map['6'] = 500;
	times_map['7'] = 500;
	times_map['8'] = 500;
	times_map['9'] = 500;
	times_map[':'] = 278;
	times_map[';'] = 278;
	times_map['<'] = 564;
	times_map['='] = 564;
	times_map['>'] = 564;
	times_map['?'] = 444;
	times_map['@'] = 921;
	times_map['A'] = 722;
	times_map['B'] = 667;
	times_map['C'] = 667;
	times_map['D'] = 722;
	times_map['E'] = 611;
	times_map['F'] = 556;
	times_map['G'] = 722;
	times_map['H'] = 722;
	times_map['I'] = 333;
	times_map['J'] = 389;
	times_map['K'] = 722;
	times_map['L'] = 611;
	times_map['M'] = 889;
	times_map['N'] = 722;
	times_map['O'] = 722;
	times_map['P'] = 556;
	times_map['Q'] = 722;
	times_map['R'] = 667;
	times_map['S'] = 556;
	times_map['T'] = 611;
	times_map['U'] = 722;
	times_map['V'] = 722;
	times_map['W'] = 944;
	times_map['X'] = 722;
	times_map['Y'] = 722;
	times_map['Z'] = 611;
	times_map['['] = 333;
	times_map['\\'] = 278;
	times_map[']'] = 333;
	times_map['^'] = 469;
	times_map['_'] = 500;
	times_map['`'] = 333;
	times_map['a'] = 444;
	times_map['b'] = 500;
	times_map['c'] = 444;
	times_map['d'] = 500;
	times_map['e'] = 444;
	times_map['f'] = 333;
	times_map['g'] = 500;
	times_map['h'] = 500;
	times_map['i'] = 278;
	times_map['j'] = 278;
	times_map['k'] = 500;
	times_map['l'] = 278;
	times_map['m'] = 778;
	times_map['n'] = 500;
	times_map['o'] = 500;
	times_map['p'] = 500;
	times_map['q'] = 500;
	times_map['r'] = 333;
	times_map['s'] = 389;
	times_map['t'] = 278;
	times_map['u'] = 500;
	times_map['v'] = 500;
	times_map['w'] = 722;
	times_map['x'] = 500;
	times_map['y'] = 500;
	times_map['z'] = 444;
	times_map['{'] = 480;
	times_map['|'] = 200;
	times_map['}'] = 480;
	times_map['~'] = 541;
	times_map[127] = 350;
	times_map[128] = 500;
	times_map[129] = 350;
	times_map[130] = 333;
	times_map[131] = 500;
	times_map[132] = 444;
	times_map[133] = 1000;
	times_map[134] = 500;
	times_map[135] = 500;
	times_map[136] = 333;
	times_map[137] = 1000;
	times_map[138] = 556;
	times_map[139] = 333;
	times_map[140] = 889;
	times_map[141] = 350;
	times_map[142] = 611;
	times_map[143] = 350;
	times_map[144] = 350;
	times_map[145] = 333;
	times_map[146] = 333;
	times_map[147] = 444;
	times_map[148] = 444;
	times_map[149] = 350;
	times_map[150] = 500;
	times_map[151] = 1000;
	times_map[152] = 333;
	times_map[153] = 980;
	times_map[154] = 389;
	times_map[155] = 333;
	times_map[156] = 722;
	times_map[157] = 350;
	times_map[158] = 444;
	times_map[159] = 722;
	times_map[160] = 250;
	times_map[161] = 333;
	times_map[162] = 500;
	times_map[163] = 500;
	times_map[164] = 500;
	times_map[165] = 500;
	times_map[166] = 200;
	times_map[167] = 500;
	times_map[168] = 333;
	times_map[169] = 760;
	times_map[170] = 276;
	times_map[171] = 500;
	times_map[172] = 564;
	times_map[173] = 333;
	times_map[174] = 760;
	times_map[175] = 333;
	times_map[176] = 400;
	times_map[177] = 564;
	times_map[178] = 300;
	times_map[179] = 300;
	times_map[180] = 333;
	times_map[181] = 500;
	times_map[182] = 453;
	times_map[183] = 250;
	times_map[184] = 333;
	times_map[185] = 300;
	times_map[186] = 310;
	times_map[187] = 500;
	times_map[188] = 750;
	times_map[189] = 750;
	times_map[190] = 750;
	times_map[191] = 444;
	times_map[192] = 722;
	times_map[193] = 722;
	times_map[194] = 722;
	times_map[195] = 722;
	times_map[196] = 722;
	times_map[197] = 722;
	times_map[198] = 889;
	times_map[199] = 667;
	times_map[200] = 611;
	times_map[201] = 611;
	times_map[202] = 611;
	times_map[203] = 611;
	times_map[204] = 333;
	times_map[205] = 333;
	times_map[206] = 333;
	times_map[207] = 333;
	times_map[208] = 722;
	times_map[209] = 722;
	times_map[210] = 722;
	times_map[211] = 722;
	times_map[212] = 722;
	times_map[213] = 722;
	times_map[214] = 722;
	times_map[215] = 564;
	times_map[216] = 722;
	times_map[217] = 722;
	times_map[218] = 722;
	times_map[219] = 722;
	times_map[220] = 722;
	times_map[221] = 722;
	times_map[222] = 556;
	times_map[223] = 500;
	times_map[224] = 444;
	times_map[225] = 444;
	times_map[226] = 444;
	times_map[227] = 444;
	times_map[228] = 444;
	times_map[229] = 444;
	times_map[230] = 667;
	times_map[231] = 444;
	times_map[232] = 444;
	times_map[233] = 444;
	times_map[234] = 444;
	times_map[235] = 444;
	times_map[236] = 278;
	times_map[237] = 278;
	times_map[238] = 278;
	times_map[239] = 278;
	times_map[240] = 500;
	times_map[241] = 500;
	times_map[242] = 500;
	times_map[243] = 500;
	times_map[244] = 500;
	times_map[245] = 500;
	times_map[246] = 500;
	times_map[247] = 564;
	times_map[248] = 500;
	times_map[249] = 500;
	times_map[250] = 500;
	times_map[251] = 500;
	times_map[252] = 500;
	times_map[253] = 500;
	times_map[254] = 500;
	times_map[255] = 500;



	std::map < unsigned char, int >&timesI_map = fpdf_charwidths["timesI"];

	timesI_map[0] = 250;
	timesI_map[1] = 250;
	timesI_map[2] = 250;
	timesI_map[3] = 250;
	timesI_map[4] = 250;
	timesI_map[5] = 250;
	timesI_map[6] = 250;
	timesI_map[7] = 250;
	timesI_map[8] = 250;
	timesI_map[9] = 250;
	timesI_map[10] = 250;
	timesI_map[11] = 250;
	timesI_map[12] = 250;
	timesI_map[13] = 250;
	timesI_map[14] = 250;
	timesI_map[15] = 250;
	timesI_map[16] = 250;
	timesI_map[17] = 250;
	timesI_map[18] = 250;
	timesI_map[19] = 250;
	timesI_map[20] = 250;
	timesI_map[21] = 250;
	timesI_map[22] = 250;
	timesI_map[23] = 250;
	timesI_map[24] = 250;
	timesI_map[25] = 250;
	timesI_map[26] = 250;
	timesI_map[27] = 250;
	timesI_map[28] = 250;
	timesI_map[29] = 250;
	timesI_map[30] = 250;
	timesI_map[31] = 250;
	timesI_map[' '] = 250;
	timesI_map['!'] = 333;
	timesI_map['"'] = 420;
	timesI_map['#'] = 500;
	timesI_map['$'] = 500;
	timesI_map['%'] = 833;
	timesI_map['&'] = 778;
	timesI_map['\''] = 214;
	timesI_map['('] = 333;
	timesI_map[')'] = 333;
	timesI_map['*'] = 500;
	timesI_map['+'] = 675;
	timesI_map[','] = 250;
	timesI_map['-'] = 333;
	timesI_map['.'] = 250;
	timesI_map['/'] = 278;
	timesI_map['0'] = 500;
	timesI_map['1'] = 500;
	timesI_map['2'] = 500;
	timesI_map['3'] = 500;
	timesI_map['4'] = 500;
	timesI_map['5'] = 500;
	timesI_map['6'] = 500;
	timesI_map['7'] = 500;
	timesI_map['8'] = 500;
	timesI_map['9'] = 500;
	timesI_map[':'] = 333;
	timesI_map[';'] = 333;
	timesI_map['<'] = 675;
	timesI_map['='] = 675;
	timesI_map['>'] = 675;
	timesI_map['?'] = 500;
	timesI_map['@'] = 920;
	timesI_map['A'] = 611;
	timesI_map['B'] = 611;
	timesI_map['C'] = 667;
	timesI_map['D'] = 722;
	timesI_map['E'] = 611;
	timesI_map['F'] = 611;
	timesI_map['G'] = 722;
	timesI_map['H'] = 722;
	timesI_map['I'] = 333;
	timesI_map['J'] = 444;
	timesI_map['K'] = 667;
	timesI_map['L'] = 556;
	timesI_map['M'] = 833;
	timesI_map['N'] = 667;
	timesI_map['O'] = 722;
	timesI_map['P'] = 611;
	timesI_map['Q'] = 722;
	timesI_map['R'] = 611;
	timesI_map['S'] = 500;
	timesI_map['T'] = 556;
	timesI_map['U'] = 722;
	timesI_map['V'] = 611;
	timesI_map['W'] = 833;
	timesI_map['X'] = 611;
	timesI_map['Y'] = 556;
	timesI_map['Z'] = 556;
	timesI_map['['] = 389;
	timesI_map['\\'] = 278;
	timesI_map[']'] = 389;
	timesI_map['^'] = 422;
	timesI_map['_'] = 500;
	timesI_map['`'] = 333;
	timesI_map['a'] = 500;
	timesI_map['b'] = 500;
	timesI_map['c'] = 444;
	timesI_map['d'] = 500;
	timesI_map['e'] = 444;
	timesI_map['f'] = 278;
	timesI_map['g'] = 500;
	timesI_map['h'] = 500;
	timesI_map['i'] = 278;
	timesI_map['j'] = 278;
	timesI_map['k'] = 444;
	timesI_map['l'] = 278;
	timesI_map['m'] = 722;
	timesI_map['n'] = 500;
	timesI_map['o'] = 500;
	timesI_map['p'] = 500;
	timesI_map['q'] = 500;
	timesI_map['r'] = 389;
	timesI_map['s'] = 389;
	timesI_map['t'] = 278;
	timesI_map['u'] = 500;
	timesI_map['v'] = 444;
	timesI_map['w'] = 667;
	timesI_map['x'] = 444;
	timesI_map['y'] = 444;
	timesI_map['z'] = 389;
	timesI_map['{'] = 400;
	timesI_map['|'] = 275;
	timesI_map['}'] = 400;
	timesI_map['~'] = 541;
	timesI_map[127] = 350;
	timesI_map[128] = 500;
	timesI_map[129] = 350;
	timesI_map[130] = 333;
	timesI_map[131] = 500;
	timesI_map[132] = 556;
	timesI_map[133] = 889;
	timesI_map[134] = 500;
	timesI_map[135] = 500;
	timesI_map[136] = 333;
	timesI_map[137] = 1000;
	timesI_map[138] = 500;
	timesI_map[139] = 333;
	timesI_map[140] = 944;
	timesI_map[141] = 350;
	timesI_map[142] = 556;
	timesI_map[143] = 350;
	timesI_map[144] = 350;
	timesI_map[145] = 333;
	timesI_map[146] = 333;
	timesI_map[147] = 556;
	timesI_map[148] = 556;
	timesI_map[149] = 350;
	timesI_map[150] = 500;
	timesI_map[151] = 889;
	timesI_map[152] = 333;
	timesI_map[153] = 980;
	timesI_map[154] = 389;
	timesI_map[155] = 333;
	timesI_map[156] = 667;
	timesI_map[157] = 350;
	timesI_map[158] = 389;
	timesI_map[159] = 556;
	timesI_map[160] = 250;
	timesI_map[161] = 389;
	timesI_map[162] = 500;
	timesI_map[163] = 500;
	timesI_map[164] = 500;
	timesI_map[165] = 500;
	timesI_map[166] = 275;
	timesI_map[167] = 500;
	timesI_map[168] = 333;
	timesI_map[169] = 760;
	timesI_map[170] = 276;
	timesI_map[171] = 500;
	timesI_map[172] = 675;
	timesI_map[173] = 333;
	timesI_map[174] = 760;
	timesI_map[175] = 333;
	timesI_map[176] = 400;
	timesI_map[177] = 675;
	timesI_map[178] = 300;
	timesI_map[179] = 300;
	timesI_map[180] = 333;
	timesI_map[181] = 500;
	timesI_map[182] = 523;
	timesI_map[183] = 250;
	timesI_map[184] = 333;
	timesI_map[185] = 300;
	timesI_map[186] = 310;
	timesI_map[187] = 500;
	timesI_map[188] = 750;
	timesI_map[189] = 750;
	timesI_map[190] = 750;
	timesI_map[191] = 500;
	timesI_map[192] = 611;
	timesI_map[193] = 611;
	timesI_map[194] = 611;
	timesI_map[195] = 611;
	timesI_map[196] = 611;
	timesI_map[197] = 611;
	timesI_map[198] = 889;
	timesI_map[199] = 667;
	timesI_map[200] = 611;
	timesI_map[201] = 611;
	timesI_map[202] = 611;
	timesI_map[203] = 611;
	timesI_map[204] = 333;
	timesI_map[205] = 333;
	timesI_map[206] = 333;
	timesI_map[207] = 333;
	timesI_map[208] = 722;
	timesI_map[209] = 667;
	timesI_map[210] = 722;
	timesI_map[211] = 722;
	timesI_map[212] = 722;
	timesI_map[213] = 722;
	timesI_map[214] = 722;
	timesI_map[215] = 675;
	timesI_map[216] = 722;
	timesI_map[217] = 722;
	timesI_map[218] = 722;
	timesI_map[219] = 722;
	timesI_map[220] = 722;
	timesI_map[221] = 556;
	timesI_map[222] = 611;
	timesI_map[223] = 500;
	timesI_map[224] = 500;
	timesI_map[225] = 500;
	timesI_map[226] = 500;
	timesI_map[227] = 500;
	timesI_map[228] = 500;
	timesI_map[229] = 500;
	timesI_map[230] = 667;
	timesI_map[231] = 444;
	timesI_map[232] = 444;
	timesI_map[233] = 444;
	timesI_map[234] = 444;
	timesI_map[235] = 444;
	timesI_map[236] = 278;
	timesI_map[237] = 278;
	timesI_map[238] = 278;
	timesI_map[239] = 278;
	timesI_map[240] = 500;
	timesI_map[241] = 500;
	timesI_map[242] = 500;
	timesI_map[243] = 500;
	timesI_map[244] = 500;
	timesI_map[245] = 500;
	timesI_map[246] = 500;
	timesI_map[247] = 675;
	timesI_map[248] = 500;
	timesI_map[249] = 500;
	timesI_map[250] = 500;
	timesI_map[251] = 500;
	timesI_map[252] = 500;
	timesI_map[253] = 444;
	timesI_map[254] = 500;
	timesI_map[255] = 444;




	std::map < unsigned char, int >&timesB_map = fpdf_charwidths["timesB"];

	timesB_map[0] = 250;
	timesB_map[1] = 250;
	timesB_map[2] = 250;
	timesB_map[3] = 250;
	timesB_map[4] = 250;
	timesB_map[5] = 250;
	timesB_map[6] = 250;
	timesB_map[7] = 250;
	timesB_map[8] = 250;
	timesB_map[9] = 250;
	timesB_map[10] = 250;
	timesB_map[11] = 250;
	timesB_map[12] = 250;
	timesB_map[13] = 250;
	timesB_map[14] = 250;
	timesB_map[15] = 250;
	timesB_map[16] = 250;
	timesB_map[17] = 250;
	timesB_map[18] = 250;
	timesB_map[19] = 250;
	timesB_map[20] = 250;
	timesB_map[21] = 250;
	timesB_map[22] = 250;
	timesB_map[23] = 250;
	timesB_map[24] = 250;
	timesB_map[25] = 250;
	timesB_map[26] = 250;
	timesB_map[27] = 250;
	timesB_map[28] = 250;
	timesB_map[29] = 250;
	timesB_map[30] = 250;
	timesB_map[31] = 250;
	timesB_map[' '] = 250;
	timesB_map['!'] = 333;
	timesB_map['"'] = 555;
	timesB_map['#'] = 500;
	timesB_map['$'] = 500;
	timesB_map['%'] = 1000;
	timesB_map['&'] = 833;
	timesB_map['\''] = 278;
	timesB_map['('] = 333;
	timesB_map[')'] = 333;
	timesB_map['*'] = 500;
	timesB_map['+'] = 570;
	timesB_map[','] = 250;
	timesB_map['-'] = 333;
	timesB_map['.'] = 250;
	timesB_map['/'] = 278;
	timesB_map['0'] = 500;
	timesB_map['1'] = 500;
	timesB_map['2'] = 500;
	timesB_map['3'] = 500;
	timesB_map['4'] = 500;
	timesB_map['5'] = 500;
	timesB_map['6'] = 500;
	timesB_map['7'] = 500;
	timesB_map['8'] = 500;
	timesB_map['9'] = 500;
	timesB_map[':'] = 333;
	timesB_map[';'] = 333;
	timesB_map['<'] = 570;
	timesB_map['='] = 570;
	timesB_map['>'] = 570;
	timesB_map['?'] = 500;
	timesB_map['@'] = 930;
	timesB_map['A'] = 722;
	timesB_map['B'] = 667;
	timesB_map['C'] = 722;
	timesB_map['D'] = 722;
	timesB_map['E'] = 667;
	timesB_map['F'] = 611;
	timesB_map['G'] = 778;
	timesB_map['H'] = 778;
	timesB_map['I'] = 389;
	timesB_map['J'] = 500;
	timesB_map['K'] = 778;
	timesB_map['L'] = 667;
	timesB_map['M'] = 944;
	timesB_map['N'] = 722;
	timesB_map['O'] = 778;
	timesB_map['P'] = 611;
	timesB_map['Q'] = 778;
	timesB_map['R'] = 722;
	timesB_map['S'] = 556;
	timesB_map['T'] = 667;
	timesB_map['U'] = 722;
	timesB_map['V'] = 722;
	timesB_map['W'] = 1000;
	timesB_map['X'] = 722;
	timesB_map['Y'] = 722;
	timesB_map['Z'] = 667;
	timesB_map['['] = 333;
	timesB_map['\\'] = 278;
	timesB_map[']'] = 333;
	timesB_map['^'] = 581;
	timesB_map['_'] = 500;
	timesB_map['`'] = 333;
	timesB_map['a'] = 500;
	timesB_map['b'] = 556;
	timesB_map['c'] = 444;
	timesB_map['d'] = 556;
	timesB_map['e'] = 444;
	timesB_map['f'] = 333;
	timesB_map['g'] = 500;
	timesB_map['h'] = 556;
	timesB_map['i'] = 278;
	timesB_map['j'] = 333;
	timesB_map['k'] = 556;
	timesB_map['l'] = 278;
	timesB_map['m'] = 833;
	timesB_map['n'] = 556;
	timesB_map['o'] = 500;
	timesB_map['p'] = 556;
	timesB_map['q'] = 556;
	timesB_map['r'] = 444;
	timesB_map['s'] = 389;
	timesB_map['t'] = 333;
	timesB_map['u'] = 556;
	timesB_map['v'] = 500;
	timesB_map['w'] = 722;
	timesB_map['x'] = 500;
	timesB_map['y'] = 500;
	timesB_map['z'] = 444;
	timesB_map['{'] = 394;
	timesB_map['|'] = 220;
	timesB_map['}'] = 394;
	timesB_map['~'] = 520;
	timesB_map[127] = 350;
	timesB_map[128] = 500;
	timesB_map[129] = 350;
	timesB_map[130] = 333;
	timesB_map[131] = 500;
	timesB_map[132] = 500;
	timesB_map[133] = 1000;
	timesB_map[134] = 500;
	timesB_map[135] = 500;
	timesB_map[136] = 333;
	timesB_map[137] = 1000;
	timesB_map[138] = 556;
	timesB_map[139] = 333;
	timesB_map[140] = 1000;
	timesB_map[141] = 350;
	timesB_map[142] = 667;
	timesB_map[143] = 350;
	timesB_map[144] = 350;
	timesB_map[145] = 333;
	timesB_map[146] = 333;
	timesB_map[147] = 500;
	timesB_map[148] = 500;
	timesB_map[149] = 350;
	timesB_map[150] = 500;
	timesB_map[151] = 1000;
	timesB_map[152] = 333;
	timesB_map[153] = 1000;
	timesB_map[154] = 389;
	timesB_map[155] = 333;
	timesB_map[156] = 722;
	timesB_map[157] = 350;
	timesB_map[158] = 444;
	timesB_map[159] = 722;
	timesB_map[160] = 250;
	timesB_map[161] = 333;
	timesB_map[162] = 500;
	timesB_map[163] = 500;
	timesB_map[164] = 500;
	timesB_map[165] = 500;
	timesB_map[166] = 220;
	timesB_map[167] = 500;
	timesB_map[168] = 333;
	timesB_map[169] = 747;
	timesB_map[170] = 300;
	timesB_map[171] = 500;
	timesB_map[172] = 570;
	timesB_map[173] = 333;
	timesB_map[174] = 747;
	timesB_map[175] = 333;
	timesB_map[176] = 400;
	timesB_map[177] = 570;
	timesB_map[178] = 300;
	timesB_map[179] = 300;
	timesB_map[180] = 333;
	timesB_map[181] = 556;
	timesB_map[182] = 540;
	timesB_map[183] = 250;
	timesB_map[184] = 333;
	timesB_map[185] = 300;
	timesB_map[186] = 330;
	timesB_map[187] = 500;
	timesB_map[188] = 750;
	timesB_map[189] = 750;
	timesB_map[190] = 750;
	timesB_map[191] = 500;
	timesB_map[192] = 722;
	timesB_map[193] = 722;
	timesB_map[194] = 722;
	timesB_map[195] = 722;
	timesB_map[196] = 722;
	timesB_map[197] = 722;
	timesB_map[198] = 1000;
	timesB_map[199] = 722;
	timesB_map[200] = 667;
	timesB_map[201] = 667;
	timesB_map[202] = 667;
	timesB_map[203] = 667;
	timesB_map[204] = 389;
	timesB_map[205] = 389;
	timesB_map[206] = 389;
	timesB_map[207] = 389;
	timesB_map[208] = 722;
	timesB_map[209] = 722;
	timesB_map[210] = 778;
	timesB_map[211] = 778;
	timesB_map[212] = 778;
	timesB_map[213] = 778;
	timesB_map[214] = 778;
	timesB_map[215] = 570;
	timesB_map[216] = 778;
	timesB_map[217] = 722;
	timesB_map[218] = 722;
	timesB_map[219] = 722;
	timesB_map[220] = 722;
	timesB_map[221] = 722;
	timesB_map[222] = 611;
	timesB_map[223] = 556;
	timesB_map[224] = 500;
	timesB_map[225] = 500;
	timesB_map[226] = 500;
	timesB_map[227] = 500;
	timesB_map[228] = 500;
	timesB_map[229] = 500;
	timesB_map[230] = 722;
	timesB_map[231] = 444;
	timesB_map[232] = 444;
	timesB_map[233] = 444;
	timesB_map[234] = 444;
	timesB_map[235] = 444;
	timesB_map[236] = 278;
	timesB_map[237] = 278;
	timesB_map[238] = 278;
	timesB_map[239] = 278;
	timesB_map[240] = 500;
	timesB_map[241] = 556;
	timesB_map[242] = 500;
	timesB_map[243] = 500;
	timesB_map[244] = 500;
	timesB_map[245] = 500;
	timesB_map[246] = 500;
	timesB_map[247] = 570;
	timesB_map[248] = 500;
	timesB_map[249] = 556;
	timesB_map[250] = 556;
	timesB_map[251] = 556;
	timesB_map[252] = 556;
	timesB_map[253] = 500;
	timesB_map[254] = 556;
	timesB_map[255] = 500;


	std::map < unsigned char, int >&timesBI_map = fpdf_charwidths["timesBI"];

	timesBI_map[0] = 250;
	timesBI_map[1] = 250;
	timesBI_map[2] = 250;
	timesBI_map[3] = 250;
	timesBI_map[4] = 250;
	timesBI_map[5] = 250;
	timesBI_map[6] = 250;
	timesBI_map[7] = 250;
	timesBI_map[8] = 250;
	timesBI_map[9] = 250;
	timesBI_map[10] = 250;
	timesBI_map[11] = 250;
	timesBI_map[12] = 250;
	timesBI_map[13] = 250;
	timesBI_map[14] = 250;
	timesBI_map[15] = 250;
	timesBI_map[16] = 250;
	timesBI_map[17] = 250;
	timesBI_map[18] = 250;
	timesBI_map[19] = 250;
	timesBI_map[20] = 250;
	timesBI_map[21] = 250;
	timesBI_map[22] = 250;
	timesBI_map[23] = 250;
	timesBI_map[24] = 250;
	timesBI_map[25] = 250;
	timesBI_map[26] = 250;
	timesBI_map[27] = 250;
	timesBI_map[28] = 250;
	timesBI_map[29] = 250;
	timesBI_map[30] = 250;
	timesBI_map[31] = 250;
	timesBI_map[' '] = 250;
	timesBI_map['!'] = 389;
	timesBI_map['"'] = 555;
	timesBI_map['#'] = 500;
	timesBI_map['$'] = 500;
	timesBI_map['%'] = 833;
	timesBI_map['&'] = 778;
	timesBI_map['\''] = 278;
	timesBI_map['('] = 333;
	timesBI_map[')'] = 333;
	timesBI_map['*'] = 500;
	timesBI_map['+'] = 570;
	timesBI_map[','] = 250;
	timesBI_map['-'] = 333;
	timesBI_map['.'] = 250;
	timesBI_map['/'] = 278;
	timesBI_map['0'] = 500;
	timesBI_map['1'] = 500;
	timesBI_map['2'] = 500;
	timesBI_map['3'] = 500;
	timesBI_map['4'] = 500;
	timesBI_map['5'] = 500;
	timesBI_map['6'] = 500;
	timesBI_map['7'] = 500;
	timesBI_map['8'] = 500;
	timesBI_map['9'] = 500;
	timesBI_map[':'] = 333;
	timesBI_map[';'] = 333;
	timesBI_map['<'] = 570;
	timesBI_map['='] = 570;
	timesBI_map['>'] = 570;
	timesBI_map['?'] = 500;
	timesBI_map['@'] = 832;
	timesBI_map['A'] = 667;
	timesBI_map['B'] = 667;
	timesBI_map['C'] = 667;
	timesBI_map['D'] = 722;
	timesBI_map['E'] = 667;
	timesBI_map['F'] = 667;
	timesBI_map['G'] = 722;
	timesBI_map['H'] = 778;
	timesBI_map['I'] = 389;
	timesBI_map['J'] = 500;
	timesBI_map['K'] = 667;
	timesBI_map['L'] = 611;
	timesBI_map['M'] = 889;
	timesBI_map['N'] = 722;
	timesBI_map['O'] = 722;
	timesBI_map['P'] = 611;
	timesBI_map['Q'] = 722;
	timesBI_map['R'] = 667;
	timesBI_map['S'] = 556;
	timesBI_map['T'] = 611;
	timesBI_map['U'] = 722;
	timesBI_map['V'] = 667;
	timesBI_map['W'] = 889;
	timesBI_map['X'] = 667;
	timesBI_map['Y'] = 611;
	timesBI_map['Z'] = 611;
	timesBI_map['['] = 333;
	timesBI_map['\\'] = 278;
	timesBI_map[']'] = 333;
	timesBI_map['^'] = 570;
	timesBI_map['_'] = 500;
	timesBI_map['`'] = 333;
	timesBI_map['a'] = 500;
	timesBI_map['b'] = 500;
	timesBI_map['c'] = 444;
	timesBI_map['d'] = 500;
	timesBI_map['e'] = 444;
	timesBI_map['f'] = 333;
	timesBI_map['g'] = 500;
	timesBI_map['h'] = 556;
	timesBI_map['i'] = 278;
	timesBI_map['j'] = 278;
	timesBI_map['k'] = 500;
	timesBI_map['l'] = 278;
	timesBI_map['m'] = 778;
	timesBI_map['n'] = 556;
	timesBI_map['o'] = 500;
	timesBI_map['p'] = 500;
	timesBI_map['q'] = 500;
	timesBI_map['r'] = 389;
	timesBI_map['s'] = 389;
	timesBI_map['t'] = 278;
	timesBI_map['u'] = 556;
	timesBI_map['v'] = 444;
	timesBI_map['w'] = 667;
	timesBI_map['x'] = 500;
	timesBI_map['y'] = 444;
	timesBI_map['z'] = 389;
	timesBI_map['{'] = 348;
	timesBI_map['|'] = 220;
	timesBI_map['}'] = 348;
	timesBI_map['~'] = 570;
	timesBI_map[127] = 350;
	timesBI_map[128] = 500;
	timesBI_map[129] = 350;
	timesBI_map[130] = 333;
	timesBI_map[131] = 500;
	timesBI_map[132] = 500;
	timesBI_map[133] = 1000;
	timesBI_map[134] = 500;
	timesBI_map[135] = 500;
	timesBI_map[136] = 333;
	timesBI_map[137] = 1000;
	timesBI_map[138] = 556;
	timesBI_map[139] = 333;
	timesBI_map[140] = 944;
	timesBI_map[141] = 350;
	timesBI_map[142] = 611;
	timesBI_map[143] = 350;
	timesBI_map[144] = 350;
	timesBI_map[145] = 333;
	timesBI_map[146] = 333;
	timesBI_map[147] = 500;
	timesBI_map[148] = 500;
	timesBI_map[149] = 350;
	timesBI_map[150] = 500;
	timesBI_map[151] = 1000;
	timesBI_map[152] = 333;
	timesBI_map[153] = 1000;
	timesBI_map[154] = 389;
	timesBI_map[155] = 333;
	timesBI_map[156] = 722;
	timesBI_map[157] = 350;
	timesBI_map[158] = 389;
	timesBI_map[159] = 611;
	timesBI_map[160] = 250;
	timesBI_map[161] = 389;
	timesBI_map[162] = 500;
	timesBI_map[163] = 500;
	timesBI_map[164] = 500;
	timesBI_map[165] = 500;
	timesBI_map[166] = 220;
	timesBI_map[167] = 500;
	timesBI_map[168] = 333;
	timesBI_map[169] = 747;
	timesBI_map[170] = 266;
	timesBI_map[171] = 500;
	timesBI_map[172] = 606;
	timesBI_map[173] = 333;
	timesBI_map[174] = 747;
	timesBI_map[175] = 333;
	timesBI_map[176] = 400;
	timesBI_map[177] = 570;
	timesBI_map[178] = 300;
	timesBI_map[179] = 300;
	timesBI_map[180] = 333;
	timesBI_map[181] = 576;
	timesBI_map[182] = 500;
	timesBI_map[183] = 250;
	timesBI_map[184] = 333;
	timesBI_map[185] = 300;
	timesBI_map[186] = 300;
	timesBI_map[187] = 500;
	timesBI_map[188] = 750;
	timesBI_map[189] = 750;
	timesBI_map[190] = 750;
	timesBI_map[191] = 500;
	timesBI_map[192] = 667;
	timesBI_map[193] = 667;
	timesBI_map[194] = 667;
	timesBI_map[195] = 667;
	timesBI_map[196] = 667;
	timesBI_map[197] = 667;
	timesBI_map[198] = 944;
	timesBI_map[199] = 667;
	timesBI_map[200] = 667;
	timesBI_map[201] = 667;
	timesBI_map[202] = 667;
	timesBI_map[203] = 667;
	timesBI_map[204] = 389;
	timesBI_map[205] = 389;
	timesBI_map[206] = 389;
	timesBI_map[207] = 389;
	timesBI_map[208] = 722;
	timesBI_map[209] = 722;
	timesBI_map[210] = 722;
	timesBI_map[211] = 722;
	timesBI_map[212] = 722;
	timesBI_map[213] = 722;
	timesBI_map[214] = 722;
	timesBI_map[215] = 570;
	timesBI_map[216] = 722;
	timesBI_map[217] = 722;
	timesBI_map[218] = 722;
	timesBI_map[219] = 722;
	timesBI_map[220] = 722;
	timesBI_map[221] = 611;
	timesBI_map[222] = 611;
	timesBI_map[223] = 500;
	timesBI_map[224] = 500;
	timesBI_map[225] = 500;
	timesBI_map[226] = 500;
	timesBI_map[227] = 500;
	timesBI_map[228] = 500;
	timesBI_map[229] = 500;
	timesBI_map[230] = 722;
	timesBI_map[231] = 444;
	timesBI_map[232] = 444;
	timesBI_map[233] = 444;
	timesBI_map[234] = 444;
	timesBI_map[235] = 444;
	timesBI_map[236] = 278;
	timesBI_map[237] = 278;
	timesBI_map[238] = 278;
	timesBI_map[239] = 278;
	timesBI_map[240] = 500;
	timesBI_map[241] = 556;
	timesBI_map[242] = 500;
	timesBI_map[243] = 500;
	timesBI_map[244] = 500;
	timesBI_map[245] = 500;
	timesBI_map[246] = 500;
	timesBI_map[247] = 570;
	timesBI_map[248] = 500;
	timesBI_map[249] = 556;
	timesBI_map[250] = 556;
	timesBI_map[251] = 556;
	timesBI_map[252] = 556;
	timesBI_map[253] = 444;
	timesBI_map[254] = 500;
	timesBI_map[255] = 444;


	std::map < unsigned char, int >&symbol_map = fpdf_charwidths["symbol"];

	symbol_map[0] = 250;
	symbol_map[1] = 250;
	symbol_map[2] = 250;
	symbol_map[3] = 250;
	symbol_map[4] = 250;
	symbol_map[5] = 250;
	symbol_map[6] = 250;
	symbol_map[7] = 250;
	symbol_map[8] = 250;
	symbol_map[9] = 250;
	symbol_map[10] = 250;
	symbol_map[11] = 250;
	symbol_map[12] = 250;
	symbol_map[13] = 250;
	symbol_map[14] = 250;
	symbol_map[15] = 250;
	symbol_map[16] = 250;
	symbol_map[17] = 250;
	symbol_map[18] = 250;
	symbol_map[19] = 250;
	symbol_map[20] = 250;
	symbol_map[21] = 250;
	symbol_map[22] = 250;
	symbol_map[23] = 250;
	symbol_map[24] = 250;
	symbol_map[25] = 250;
	symbol_map[26] = 250;
	symbol_map[27] = 250;
	symbol_map[28] = 250;
	symbol_map[29] = 250;
	symbol_map[30] = 250;
	symbol_map[31] = 250;
	symbol_map[' '] = 250;
	symbol_map['!'] = 333;
	symbol_map['"'] = 713;
	symbol_map['#'] = 500;
	symbol_map['$'] = 549;
	symbol_map['%'] = 833;
	symbol_map['&'] = 778;
	symbol_map['\''] = 439;
	symbol_map['('] = 333;
	symbol_map[')'] = 333;
	symbol_map['*'] = 500;
	symbol_map['+'] = 549;
	symbol_map[','] = 250;
	symbol_map['-'] = 549;
	symbol_map['.'] = 250;
	symbol_map['/'] = 278;
	symbol_map['0'] = 500;
	symbol_map['1'] = 500;
	symbol_map['2'] = 500;
	symbol_map['3'] = 500;
	symbol_map['4'] = 500;
	symbol_map['5'] = 500;
	symbol_map['6'] = 500;
	symbol_map['7'] = 500;
	symbol_map['8'] = 500;
	symbol_map['9'] = 500;
	symbol_map[':'] = 278;
	symbol_map[';'] = 278;
	symbol_map['<'] = 549;
	symbol_map['='] = 549;
	symbol_map['>'] = 549;
	symbol_map['?'] = 444;
	symbol_map['@'] = 549;
	symbol_map['A'] = 722;
	symbol_map['B'] = 667;
	symbol_map['C'] = 722;
	symbol_map['D'] = 612;
	symbol_map['E'] = 611;
	symbol_map['F'] = 763;
	symbol_map['G'] = 603;
	symbol_map['H'] = 722;
	symbol_map['I'] = 333;
	symbol_map['J'] = 631;
	symbol_map['K'] = 722;
	symbol_map['L'] = 686;
	symbol_map['M'] = 889;
	symbol_map['N'] = 722;
	symbol_map['O'] = 722;
	symbol_map['P'] = 768;
	symbol_map['Q'] = 741;
	symbol_map['R'] = 556;
	symbol_map['S'] = 592;
	symbol_map['T'] = 611;
	symbol_map['U'] = 690;
	symbol_map['V'] = 439;
	symbol_map['W'] = 768;
	symbol_map['X'] = 645;
	symbol_map['Y'] = 795;
	symbol_map['Z'] = 611;
	symbol_map['['] = 333;
	symbol_map['\\'] = 863;
	symbol_map[']'] = 333;
	symbol_map['^'] = 658;
	symbol_map['_'] = 500;
	symbol_map['`'] = 500;
	symbol_map['a'] = 631;
	symbol_map['b'] = 549;
	symbol_map['c'] = 549;
	symbol_map['d'] = 494;
	symbol_map['e'] = 439;
	symbol_map['f'] = 521;
	symbol_map['g'] = 411;
	symbol_map['h'] = 603;
	symbol_map['i'] = 329;
	symbol_map['j'] = 603;
	symbol_map['k'] = 549;
	symbol_map['l'] = 549;
	symbol_map['m'] = 576;
	symbol_map['n'] = 521;
	symbol_map['o'] = 549;
	symbol_map['p'] = 549;
	symbol_map['q'] = 521;
	symbol_map['r'] = 549;
	symbol_map['s'] = 603;
	symbol_map['t'] = 439;
	symbol_map['u'] = 576;
	symbol_map['v'] = 713;
	symbol_map['w'] = 686;
	symbol_map['x'] = 493;
	symbol_map['y'] = 686;
	symbol_map['z'] = 494;
	symbol_map['{'] = 480;
	symbol_map['|'] = 200;
	symbol_map['}'] = 480;
	symbol_map['~'] = 549;
	symbol_map[127] = 0;
	symbol_map[128] = 0;
	symbol_map[129] = 0;
	symbol_map[130] = 0;
	symbol_map[131] = 0;
	symbol_map[132] = 0;
	symbol_map[133] = 0;
	symbol_map[134] = 0;
	symbol_map[135] = 0;
	symbol_map[136] = 0;
	symbol_map[137] = 0;
	symbol_map[138] = 0;
	symbol_map[139] = 0;
	symbol_map[140] = 0;
	symbol_map[141] = 0;
	symbol_map[142] = 0;
	symbol_map[143] = 0;
	symbol_map[144] = 0;
	symbol_map[145] = 0;
	symbol_map[146] = 0;
	symbol_map[147] = 0;
	symbol_map[148] = 0;
	symbol_map[149] = 0;
	symbol_map[150] = 0;
	symbol_map[151] = 0;
	symbol_map[152] = 0;
	symbol_map[153] = 0;
	symbol_map[154] = 0;
	symbol_map[155] = 0;
	symbol_map[156] = 0;
	symbol_map[157] = 0;
	symbol_map[158] = 0;
	symbol_map[159] = 0;
	symbol_map[160] = 750;
	symbol_map[161] = 620;
	symbol_map[162] = 247;
	symbol_map[163] = 549;
	symbol_map[164] = 167;
	symbol_map[165] = 713;
	symbol_map[166] = 500;
	symbol_map[167] = 753;
	symbol_map[168] = 753;
	symbol_map[169] = 753;
	symbol_map[170] = 753;
	symbol_map[171] = 1042;
	symbol_map[172] = 987;
	symbol_map[173] = 603;
	symbol_map[174] = 987;
	symbol_map[175] = 603;
	symbol_map[176] = 400;
	symbol_map[177] = 549;
	symbol_map[178] = 411;
	symbol_map[179] = 549;
	symbol_map[180] = 549;
	symbol_map[181] = 713;
	symbol_map[182] = 494;
	symbol_map[183] = 460;
	symbol_map[184] = 549;
	symbol_map[185] = 549;
	symbol_map[186] = 549;
	symbol_map[187] = 549;
	symbol_map[188] = 1000;
	symbol_map[189] = 603;
	symbol_map[190] = 1000;
	symbol_map[191] = 658;
	symbol_map[192] = 823;
	symbol_map[193] = 686;
	symbol_map[194] = 795;
	symbol_map[195] = 987;
	symbol_map[196] = 768;
	symbol_map[197] = 768;
	symbol_map[198] = 823;
	symbol_map[199] = 768;
	symbol_map[200] = 768;
	symbol_map[201] = 713;
	symbol_map[202] = 713;
	symbol_map[203] = 713;
	symbol_map[204] = 713;
	symbol_map[205] = 713;
	symbol_map[206] = 713;
	symbol_map[207] = 713;
	symbol_map[208] = 768;
	symbol_map[209] = 713;
	symbol_map[210] = 790;
	symbol_map[211] = 790;
	symbol_map[212] = 890;
	symbol_map[213] = 823;
	symbol_map[214] = 549;
	symbol_map[215] = 250;
	symbol_map[216] = 713;
	symbol_map[217] = 603;
	symbol_map[218] = 603;
	symbol_map[219] = 1042;
	symbol_map[220] = 987;
	symbol_map[221] = 603;
	symbol_map[222] = 987;
	symbol_map[223] = 603;
	symbol_map[224] = 494;
	symbol_map[225] = 329;
	symbol_map[226] = 790;
	symbol_map[227] = 790;
	symbol_map[228] = 786;
	symbol_map[229] = 713;
	symbol_map[230] = 384;
	symbol_map[231] = 384;
	symbol_map[232] = 384;
	symbol_map[233] = 384;
	symbol_map[234] = 384;
	symbol_map[235] = 384;
	symbol_map[236] = 494;
	symbol_map[237] = 494;
	symbol_map[238] = 494;
	symbol_map[239] = 494;
	symbol_map[240] = 0;
	symbol_map[241] = 329;
	symbol_map[242] = 274;
	symbol_map[243] = 686;
	symbol_map[244] = 686;
	symbol_map[245] = 686;
	symbol_map[246] = 384;
	symbol_map[247] = 384;
	symbol_map[248] = 384;
	symbol_map[249] = 384;
	symbol_map[250] = 384;
	symbol_map[251] = 384;
	symbol_map[252] = 494;
	symbol_map[253] = 494;
	symbol_map[254] = 494;
	symbol_map[255] = 0;

}

std::vector<std::string> splitstr(std::string const &str, std::string const &sep)
{
	std::string::size_type sep_p = 0;
	std::vector<std::string> ris;
	
	do {
		std::string::size_type new_sep_p = str.find(sep, sep_p);			
		std::string tmp = str.substr(sep_p, new_sep_p-sep_p);
		ris.push_back(tmp);
		
		while( (new_sep_p != std::string::npos) && (new_sep_p < (str.size()-1)) && (str.substr(new_sep_p+1, sep.size()) == sep) )
			++new_sep_p;
		
		if(new_sep_p == std::string::npos)
			break;
			
		sep_p = new_sep_p+1;
	} while(1);
	
	return ris;
}

FontData Pdf::ReadTrueTypeFont ( std::string const &file, std::string const & ocharset ) throw(PdfException)
{
	std::string charset = ocharset;
	if(charset.empty())
		charset = "cp1252";

	FontData retval;
	char buf[1024];

	FILE * fp = fopen ( file.c_str(), "rb" );
	if ( !fp )
		throw PdfException ( "Unable to read font file " ) << file;
	
	fseek ( fp, 0, SEEK_END );
	long sz = ftell ( fp );
	fseek ( fp, 0, SEEK_SET );

	TT_BYTE * fdata = (TT_BYTE *) malloc ( sz );
	fread ( fdata, sz, 1, fp );

	fclose ( fp );

	std::vector< std::pair<std::string, unsigned long> > char_map = ReadMap(charset);
	PDFMETRICS metrics;
	TT_BOOL ret = ParseTrueType ( fdata, sz, &metrics, char_map );

	free ( fdata );

	if ( !ret )
		throw PdfException ( "Unable to parse font file " ) << file;

	retval.type = "TrueType";
	retval.name = metrics.fontName;
	std::replace ( retval.name.begin(), retval.name.end(), ' ', '-' );

	sprintf ( buf, "/Ascent %.2f", (double)metrics.Ascent );
	retval.desc = buf;
	sprintf ( buf, " /Descent %.2f", (double)metrics.Descent );
	retval.desc += buf;
	sprintf ( buf, " /CapHeight %.2f", (double)metrics.CapHeight );
	retval.desc += buf;
	sprintf ( buf, " /Flags %u", metrics.flags );
	retval.desc += buf;
	sprintf ( buf, " /FontBBox [%.2f %.2f %.2f %.2f]", (double)metrics.bbtop, (double)metrics.bbleft,
		(double)metrics.bbbottom, (double)metrics.bbright );
	retval.desc += buf;
	sprintf ( buf, " /ItalicAngle %.2f", (double)metrics.ItalicAngle );
	retval.desc += buf;
	sprintf ( buf, " /StemV %.2f", (double)metrics.StemV );
	retval.desc += buf;

	retval.file = file;
	retval.size2 = sz;
	retval.up = metrics.underlinePosition;
	retval.ut = metrics.underlineThickness;

	retval.cw = &fpdf_charwidths [ retval.name ];
	std::map < unsigned char, int > &cw = *retval.cw;
	for ( int i = 0; i < 256; i++ )
		cw [ (unsigned char) i ] = metrics.Widths [ i ];

	retval.originalsize = sz;
	retval.diff = MakeFontEncoding(char_map);
	retval.enc = charset;

	return retval;
}

std::vector< std::pair<std::string, unsigned long> > Pdf::ReadMap(std::string const &enc)
{
	std::vector< std::pair<std::string, unsigned long> > cc2gn(256);
	
	if (enc == "cp1252") {
		cc2gn = cp1252_map;
		return cc2gn;
	}
	else if(enc == "iso-8859-1") {
		cc2gn = iso88591_map;
		return cc2gn;
	}
	else if(enc == "iso-8859-15") {
		cc2gn = iso885915_map;
		return cc2gn;
	}
	
	std::string file(ENCODINGS_PATH);
	file += "/";
	file += lowerstr(enc);
	file += ".map";
	
	std::ifstream f(file.c_str());
	if (!f)
		throw PdfException("Unable to read font encoding map ") << enc;
		
	while (!f.eof())
	{
		std::string line;
		getline (f, line);

		if (line.empty())
			continue;
			
		if (line[0] == '!') {
				line = line.substr(1, std::string::npos);
				std::istringstream ss(line);
				std::string id, uidstr;
				int hex;
				unsigned long uid;
				
				ss >> std::hex >> hex >> uidstr >> id;
				
				uidstr = uidstr.substr(2);
				std::istringstream ss_hex(uidstr);
				ss_hex >> std::hex >> uid;
				
				cc2gn[hex] = std::make_pair(id, uid);
		}
	}
	f.close();

	for(int i=0; i<256; ++i) {
		if (cc2gn[i].first.empty())
			cc2gn[i] = std::make_pair(".notdef", static_cast<unsigned long>(i));
	}
	
	return cc2gn;
}

std::string Pdf::MakeFontEncoding(std::vector< std::pair<std::string, unsigned long> > const &map)
{
	std::vector< std::pair<std::string, unsigned long> > ref = ReadMap("cp1252");
	std::string s;
	int last = 0;
	
	for(int i=32; i<256; ++i) {
		if (map[i].first != ref[i].first) {
			if(i != (last+1)) {
				s += nval(i);
				s += ' ';
			}
			last = i;
			s+= '/';
			s+=map[i].first;
			s+=' ';
		}
	}
	
	return trimstr(s);
}

FontData Pdf::ReadAFM(std::string const &file, std::vector< std::pair<std::string, unsigned long> > &map)
{
	std::ifstream f(file.c_str());
	if(!f)
		throw PdfException("Unable to read font metric file ") << file;
		
	std::map<unsigned char, int> widths;
	std::map<std::string, int> alpha_widths;
	FontData fm;
	static std::map<std::string, std::string> fix;
	
	fm.up = 50;
	fm.ut = -100;
	
	if (fix.empty()) {
		fix["Edot"]="Edotaccent";
		fix["edot"]="edotaccent";
		fix["Idot"]="Idotaccent";
		fix["Zdot"]="Zdotaccent";
		fix["zdot"]="zdotaccent";
		fix["Odblacute"]="Ohungarumlaut";
		fix["odblacute"]="ohungarumlaut";
		fix["Udblacute"]="Uhungarumlaut";
		fix["udblacute"]="uhungarumlaut";
		fix["Gcedilla"]="Gcommaaccent";
		fix["gcedilla"]="gcommaaccent";
		fix["Kcedilla"]="Kcommaaccent";
		fix["kcedilla"]="kcommaaccent";
		fix["Lcedilla"]="Lcommaaccent";
		fix["lcedilla"]="lcommaaccent";
		fix["Ncedilla"]="Ncommaaccent";
		fix["ncedilla"]="ncommaaccent";
		fix["Rcedilla"]="Rcommaaccent";
		fix["rcedilla"]="rcommaaccent";
		fix["Scedilla"]="Scommaaccent";
		fix["scedilla"]="scommaaccent";
		fix["Tcedilla"]="Tcommaaccent";
		fix["tcedilla"]="tcommaaccent";
		fix["Dslash"]="Dcroat";
		fix["dslash"]="dcroat";
		fix["Dmacron"]="Dcroat";
		fix["dmacron"]="dcroat";
		fix["combininggraveaccent"]="gravecomb";
		fix["combininghookabove"]="hookabovecomb";
		fix["combiningtildeaccent"]="tildecomb";
		fix["combiningacuteaccent"]="acutecomb";
		fix["combiningdotbelow"]="dotbelowcomb";
		fix["dongsign"]="dong";
	}

	std::string CapXHeight = "";
	std::string CapHeight = "";
	std::string MissingWidth = "";
	std::string Weight = "";
	int flags = 1<<5;
	std::string Asc = "1000";
	std::string Desc = "-200";
	std::string StdVW = "";
	
	while (!f.eof()) {
		std::string line;
		getline(f, line);
		line = trimstr(line);
		
		std::vector<std::string> e = splitstr(line, " ");
		if(e.size() < 2)
			continue;
			
		std::string code = e[0];
		std::string param = e[1];
		
		if(code == "C") {
			int cc = as<int>(e[1]);
			int w = as<int>(e[4]);
			std::string gn = e[7];
			
			if ( (gn.size() >= 4) && (gn.substr(gn.size()-4) == "20AC") )
				gn = "Euro";
				
			if (fix.find(gn) != fix.end()) {
				for(std::vector< std::pair<std::string, unsigned long> >::iterator i = map.begin(); i != map.end(); ++i) {
					if( i->first == fix[gn] )
						i->first = gn;
				}
			}
			
			if (map.empty()) {
				widths[cc] = w;
			}
			else {
				alpha_widths[gn] = w;
				if(gn == "X")
					CapXHeight = e[13];
			}
			
			if(gn == ".notdef")
				MissingWidth = nval(w);
		}
		else if(code == "FontName")
			fm.name = param;
		else if(code == "Weight")
			Weight = param;
		else if(code == "ItalicAngle") {
			fm.desc += "/ItalicAngle ";
			fm.desc += param;
			fm.desc += " ";
			if(param != "0")
				flags += 1<<6;
		}
		else if(code == "Ascender") {
			Asc = param;
		}
		else if(code == "Descender") {
			Desc = param;
		}
		else if(code == "UnderlineThickness") {
			fm.ut = as<int>(param);
		}
		else if(code == "UnderlinePosition") {
			fm.up = as<int>(param);
		}
		else if(code == "IsFixedPitch") {
			if(param == "true")
				flags += 1;
		}
		else if(code == "FontBBox") {
			fm.desc += "/FontBBox [";
			fm.desc += e[1];
			fm.desc += " ";
			fm.desc += e[2];
			fm.desc += " ";
			fm.desc += e[3];
			fm.desc += " ";
			fm.desc += e[4];
			fm.desc += "] ";
		}
		else if(code == "CapHeight") {
			CapHeight = param;
		}
		else if(code == "StdVW") {
			StdVW = param;
		}
	}
	
	if(fm.name.empty())
		throw PdfException("Font name not found");
	
	fm.desc += "/Ascent ";
	fm.desc += Asc;
	fm.desc += " ";

	fm.desc += "/Descent ";
	fm.desc += Desc;
	fm.desc += " ";
	
	if (!CapHeight.empty()) {
		fm.desc += "/CapHeight ";
		fm.desc += CapHeight;
		fm.desc += " ";
	}
	else if(!CapXHeight.empty()) {
		fm.desc += "/CapHeight ";
		fm.desc += CapXHeight;
		fm.desc += " ";
	}
	else {
		fm.desc += "/CapHeight ";
		fm.desc += Asc;
		fm.desc += " ";
	}
	
	fm.desc += "/Flags ";
	fm.desc += nval(flags);
	fm.desc += " ";
	
	if(!StdVW.empty()) {
		fm.desc += "/StemV ";
		fm.desc += StdVW;
		fm.desc += " ";
	}
	else if( (Weight == "bold") || (Weight == "black") ) {
		fm.desc += "/StemV 120 ";
	}
	else {
		fm.desc += "/StemV 70 ";
	}
	
	if (!MissingWidth.empty()) {
		fm.desc += "/MissingWidth ";
		fm.desc += MissingWidth;
		fm.desc += " ";
	}
	
	if( !map.empty() ) {
		if(alpha_widths.find(".notdef") == alpha_widths.end())
			alpha_widths[".notdef"] = 600;
		if( (alpha_widths.find("Delta") == alpha_widths.end()) && (alpha_widths.find("increment") != alpha_widths.end()))
			alpha_widths["Delta"] = alpha_widths["increment"];
		
		for(int i=0; i<256; ++i) {
			std::string charid = map[i].first;
			if (alpha_widths.find(charid) == alpha_widths.end()) {
				std::cerr << "Character " << charid << " is missing" << std::endl;
				widths[i] = alpha_widths[".notdef"];
			}
			else
				widths[i] = alpha_widths[charid];
		}
	}
	
	fpdf_charwidths[fm.name] = widths;
	fm.cw = &fpdf_charwidths[fm.name];

	fm.diff = MakeFontEncoding(map);

	return fm;
}

FontData Pdf::ReadType1Font ( std::string const &afm_file, std::string const &font_file, std::string const &ocharset ) throw(PdfException)
{
	std::string charset = ocharset;
	if(charset.empty())
		charset = "cp1252";
		
	std::vector< std::pair<std::string, unsigned long> > char_map = ReadMap(charset);
	FontData fd = ReadAFM(afm_file, char_map);
	fd.enc = charset;
	fd.type = "Type1";
	
	std::ifstream font(font_file.c_str());
	if (!font)
		throw PdfException("Unable to open font file ") << font_file;
		
	std::string buffer;
	while(!font.eof()) {
		buffer += font.get();
	}
	
	bool header = (static_cast<unsigned char>(buffer[0]) == 128);
	if (header) {
		buffer = buffer.substr(6);
	}
	
	std::string::size_type pos = buffer.find("eexec");
	if(pos == std::string::npos)
		throw PdfException("Font file does not seem to be a valid Type1");
	fd.size1 = static_cast<int>(pos+6);
	
	if(header && (static_cast<unsigned char>(buffer[fd.size1]) == 128)) {
		std::string preamp = buffer.substr(0, fd.size1);
		std::string post = buffer.substr(fd.size1+6);
		buffer = preamp;
		buffer += post;
	}
	
	pos = buffer.find("00000000");
	if(pos == std::string::npos)
		throw PdfException("Font file does not seem to be a valid Type1");
	fd.size2 = static_cast<int>(pos - fd.size1);
				
	return fd;
}

std::string Pdf::SaveReducedTrueTypeFont ( std::string const &file, std::string const & charset ) throw(PdfException)
{
	std::string retval;
	FILE * fp = fopen ( file.c_str(), "rb" );
	if ( !fp )
		throw PdfException ( "Unable to read font file " ) << file;
	
	fseek ( fp, 0, SEEK_END );
	long sz = ftell ( fp );
	fseek ( fp, 0, SEEK_SET );

	TT_BYTE * fdata = (TT_BYTE *) malloc ( sz );
	fread ( fdata, sz, 1, fp );

	fclose ( fp );

	std::vector< std::pair<std::string, unsigned long> > char_map = ReadMap(charset);
	retval = ReduceTrueType ( fdata, sz, char_map, charset);

	free ( fdata );

	if ( retval.empty() )
		throw PdfException ( "Unable to generate reduced font file " ) << file;
		
	return retval;
}


